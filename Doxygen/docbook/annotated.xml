<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_annotated" xml:lang="en-US">
<title>Data Structures</title>
Here are the data structures with brief descriptions:<link linkend="_struct_a_d_c___common___type_def">ADC_Common_TypeDef</link><link linkend="_struct_a_d_c___type_def">ADC_TypeDef</link>
<para>Analog to Digital Converter <?linebreak?> </para>
<link linkend="_union_a_p_s_r___type">APSR_Type</link>
<para>Union type to access the Application Program Status Register (APSR) </para>
<link linkend="_struct_c_a_n___f_i_f_o_mail_box___type_def">CAN_FIFOMailBox_TypeDef</link>
<para>Controller Area Network FIFOMailBox </para>
<link linkend="_struct_c_a_n___filter_register___type_def">CAN_FilterRegister_TypeDef</link>
<para>Controller Area Network FilterRegister </para>
<link linkend="_struct_c_a_n___tx_mail_box___type_def">CAN_TxMailBox_TypeDef</link>
<para>Controller Area Network TxMailBox </para>
<link linkend="_struct_c_a_n___type_def">CAN_TypeDef</link>
<para>Controller Area Network </para>
<link linkend="_union_c_o_n_t_r_o_l___type">CONTROL_Type</link>
<para>Union type to access the Control Registers (CONTROL) </para>
<link linkend="_struct_core_debug___type">CoreDebug_Type</link>
<para>Structure type to access the Core Debug Register (CoreDebug) </para>
<link linkend="_struct_c_r_c___type_def">CRC_TypeDef</link>
<para>CRC calculation unit </para>
<link linkend="_struct_c_r_y_p___type_def">CRYP_TypeDef</link>
<para>Crypto Processor </para>
<link linkend="_struct_d_a_c___type_def">DAC_TypeDef</link>
<para>Digital to Analog Converter </para>
<link linkend="_struct_d_b_g_m_c_u___type_def">DBGMCU_TypeDef</link>
<para>Debug MCU </para>
<link linkend="_struct_d_c_m_i___type_def">DCMI_TypeDef</link>
<para>DCMI </para>
<link linkend="_struct_d_m_a___init_type_def">DMA_InitTypeDef</link>
<para>DMA Init structure definition </para>
<link linkend="_struct_d_m_a___stream___type_def">DMA_Stream_TypeDef</link>
<para>DMA Controller </para>
<link linkend="_struct_d_m_a___type_def">DMA_TypeDef</link><link linkend="_struct_e_t_h___type_def">ETH_TypeDef</link>
<para>Ethernet MAC </para>
<link linkend="_struct_e_x_t_i___type_def">EXTI_TypeDef</link>
<para>External Interrupt/Event Controller </para>
<link linkend="_struct_f_l_a_s_h___type_def">FLASH_TypeDef</link>
<para>FLASH Registers </para>
<link linkend="_struct_f_s_m_c___bank1___type_def">FSMC_Bank1_TypeDef</link>
<para>Flexible Static Memory Controller </para>
<link linkend="_struct_f_s_m_c___bank1_e___type_def">FSMC_Bank1E_TypeDef</link>
<para>Flexible Static Memory Controller Bank1E </para>
<link linkend="_struct_f_s_m_c___bank2___type_def">FSMC_Bank2_TypeDef</link>
<para>Flexible Static Memory Controller Bank2 </para>
<link linkend="_struct_f_s_m_c___bank3___type_def">FSMC_Bank3_TypeDef</link>
<para>Flexible Static Memory Controller Bank3 </para>
<link linkend="_struct_f_s_m_c___bank4___type_def">FSMC_Bank4_TypeDef</link>
<para>Flexible Static Memory Controller Bank4 </para>
<link linkend="_struct_g_p_i_o___init_type_def">GPIO_InitTypeDef</link>
<para>GPIO Init structure definition <?linebreak?> </para>
<link linkend="_struct_g_p_i_o___type_def">GPIO_TypeDef</link>
<para>General Purpose I/O </para>
<link linkend="_struct_h_a_s_h___type_def">HASH_TypeDef</link>
<para>HASH </para>
<link linkend="_struct_i2_c___type_def">I2C_TypeDef</link>
<para>Inter-integrated Circuit Interface </para>
<link linkend="_union_i_p_s_r___type">IPSR_Type</link>
<para>Union type to access the Interrupt Program Status Register (IPSR) </para>
<link linkend="_struct_i_t_m___type">ITM_Type</link>
<para>Structure type to access the Instrumentation Trace Macrocell Register (ITM) </para>
<link linkend="_struct_i_w_d_g___type_def">IWDG_TypeDef</link>
<para>Independent WATCHDOG </para>
<link linkend="_struct_n_v_i_c___init_type_def">NVIC_InitTypeDef</link>
<para>NVIC Init Structure definition <?linebreak?> </para>
<link linkend="_struct_n_v_i_c___type">NVIC_Type</link>
<para>Structure type to access the Nested Vectored Interrupt Controller (NVIC) </para>
<link linkend="_struct_p_a_r_s_e___s_t_o_r_a_g_e">PARSE_STORAGE</link><link linkend="_struct_p_w_r___type_def">PWR_TypeDef</link>
<para>Power Control </para>
<link linkend="_struct_r_c_c___clocks_type_def">RCC_ClocksTypeDef</link><link linkend="_struct_r_c_c___type_def">RCC_TypeDef</link>
<para>Reset and Clock Control </para>
<link linkend="_struct_r_n_g___type_def">RNG_TypeDef</link>
<para>HASH </para>
<link linkend="_struct_r_t_c___type_def">RTC_TypeDef</link>
<para>Real-Time Clock </para>
<link linkend="_struct_s_c_b___type">SCB_Type</link>
<para>Structure type to access the System Control Block (SCB) </para>
<link linkend="_struct_s_cn_s_c_b___type">SCnSCB_Type</link>
<para>Structure type to access the System Control and ID Register not in the SCB </para>
<link linkend="_struct_s_d_i_o___type_def">SDIO_TypeDef</link>
<para>SD host Interface </para>
<link linkend="_struct_s_p_i___type_def">SPI_TypeDef</link>
<para>Serial Peripheral Interface </para>
<link linkend="_struct_s_y_s_c_f_g___type_def">SYSCFG_TypeDef</link>
<para>System configuration controller </para>
<link linkend="_struct_sys_tick___type">SysTick_Type</link>
<para>Structure type to access the System Timer (SysTick) </para>
<link linkend="_struct_t_i_m___b_d_t_r_init_type_def">TIM_BDTRInitTypeDef</link>
<para>BDTR structure definition </para>
<link linkend="_struct_t_i_m___i_c_init_type_def">TIM_ICInitTypeDef</link>
<para>TIM Input Capture Init structure definition <?linebreak?> </para>
<link linkend="_struct_t_i_m___o_c_init_type_def">TIM_OCInitTypeDef</link>
<para>TIM Output Compare Init structure definition <?linebreak?> </para>
<link linkend="_struct_t_i_m___time_base_init_type_def">TIM_TimeBaseInitTypeDef</link>
<para>TIM Time Base Init structure definition <?linebreak?> </para>
<link linkend="_struct_t_i_m___type_def">TIM_TypeDef</link>
<para>TIM </para>
<link linkend="_struct_u_a_r_t___communication">UART_Communication</link><link linkend="_struct_u_s_a_r_t___type_def">USART_TypeDef</link>
<para>Universal Synchronous Asynchronous Receiver Transmitter </para>
<link linkend="_struct_v_g_a__t">VGA_t</link><link linkend="_struct_w_w_d_g___type_def">WWDG_TypeDef</link>
<para>Window WATCHDOG </para>
<link linkend="_unionx_p_s_r___type">xPSR_Type</link>
<para>Union type to access the Special-Purpose Program Status Registers (xPSR) </para>
</section>
