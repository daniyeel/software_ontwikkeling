<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group___r_c_c" xml:lang="en-US">
<title>RCC</title>
<indexterm><primary>RCC</primary></indexterm>
<para>

<para>RCC driver modules. </para>
 
</para>
<simplesect>
    <title>Modules    </title>
        <itemizedlist>
            <listitem><para><link linkend="_group___r_c_c___exported___constants">RCC_Exported_Constants</link></para>
</listitem>
            <listitem><para><link linkend="_group___r_c_c___private___functions">RCC_Private_Functions</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Data Structures    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_struct_r_c_c___clocks_type_def">RCC_ClocksTypeDef</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_group___r_c_c_1ga539e07c3b3c55f1f1d47231341fb11e1"/>#define <emphasis role="strong">RCC_OFFSET</emphasis>&#160;&#160;&#160;(RCC_BASE - <link linkend="_group___peripheral__memory__map_1ga9171f49478fa86d932f89e78e73b88b0">PERIPH_BASE</link>)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___r_c_c_1gafa1d3d0ea72132df651c76fc1bdffffc"/>#define <emphasis role="strong">CR_OFFSET</emphasis>&#160;&#160;&#160;(RCC_OFFSET + 0x00)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___r_c_c_1ga3d3085e491cbef815d223afbe5bf1930"/>#define <emphasis role="strong">HSION_BitNumber</emphasis>&#160;&#160;&#160;0x00</para>
</listitem>
            <listitem><para><anchor xml:id="_group___r_c_c_1gac3290a833c0e35ec17d32c2d494e6133"/>#define <emphasis role="strong">CR_HSION_BB</emphasis>&#160;&#160;&#160;(<link linkend="_group___peripheral__memory__map_1gaed7efc100877000845c236ccdc9e144a">PERIPH_BB_BASE</link> + (CR_OFFSET * 32) + (HSION_BitNumber * 4))</para>
</listitem>
            <listitem><para><anchor xml:id="_group___r_c_c_1ga253fa44d87aabc55f0cd6628e77a51fd"/>#define <emphasis role="strong">CSSON_BitNumber</emphasis>&#160;&#160;&#160;0x13</para>
</listitem>
            <listitem><para><anchor xml:id="_group___r_c_c_1gaca914aed10477ae4090fea0a9639b1ea"/>#define <emphasis role="strong">CR_CSSON_BB</emphasis>&#160;&#160;&#160;(<link linkend="_group___peripheral__memory__map_1gaed7efc100877000845c236ccdc9e144a">PERIPH_BB_BASE</link> + (CR_OFFSET * 32) + (CSSON_BitNumber * 4))</para>
</listitem>
            <listitem><para><anchor xml:id="_group___r_c_c_1gab24d7f5f8e4b3b717fd91b54f393f6a3"/>#define <emphasis role="strong">PLLON_BitNumber</emphasis>&#160;&#160;&#160;0x18</para>
</listitem>
            <listitem><para><anchor xml:id="_group___r_c_c_1ga3f1fb2589cb8b5ac2f7121aba1135a5f"/>#define <emphasis role="strong">CR_PLLON_BB</emphasis>&#160;&#160;&#160;(<link linkend="_group___peripheral__memory__map_1gaed7efc100877000845c236ccdc9e144a">PERIPH_BB_BASE</link> + (CR_OFFSET * 32) + (PLLON_BitNumber * 4))</para>
</listitem>
            <listitem><para><anchor xml:id="_group___r_c_c_1gabae59c3e4200523e3aa5b6e10aee8c46"/>#define <emphasis role="strong">PLLI2SON_BitNumber</emphasis>&#160;&#160;&#160;0x1A</para>
</listitem>
            <listitem><para><anchor xml:id="_group___r_c_c_1ga0c0fb27aba4eb660f7590252596bdfc5"/>#define <emphasis role="strong">CR_PLLI2SON_BB</emphasis>&#160;&#160;&#160;(<link linkend="_group___peripheral__memory__map_1gaed7efc100877000845c236ccdc9e144a">PERIPH_BB_BASE</link> + (CR_OFFSET * 32) + (PLLI2SON_BitNumber * 4))</para>
</listitem>
            <listitem><para><anchor xml:id="_group___r_c_c_1ga8682298330c3b9bae1992e4f1a0af985"/>#define <emphasis role="strong">CFGR_OFFSET</emphasis>&#160;&#160;&#160;(RCC_OFFSET + 0x08)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___r_c_c_1ga9561d436b438d8f513b754f1934c3e30"/>#define <emphasis role="strong">I2SSRC_BitNumber</emphasis>&#160;&#160;&#160;0x17</para>
</listitem>
            <listitem><para><anchor xml:id="_group___r_c_c_1ga9076f5ddbb262fd45584702f5d280c9e"/>#define <emphasis role="strong">CFGR_I2SSRC_BB</emphasis>&#160;&#160;&#160;(<link linkend="_group___peripheral__memory__map_1gaed7efc100877000845c236ccdc9e144a">PERIPH_BB_BASE</link> + (CFGR_OFFSET * 32) + (I2SSRC_BitNumber * 4))</para>
</listitem>
            <listitem><para><anchor xml:id="_group___r_c_c_1ga5f8a0c3cb5f5c835bf7eef09515138ad"/>#define <emphasis role="strong">BDCR_OFFSET</emphasis>&#160;&#160;&#160;(RCC_OFFSET + 0x70)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___r_c_c_1ga9302c551752124766afc4cee65436405"/>#define <emphasis role="strong">RTCEN_BitNumber</emphasis>&#160;&#160;&#160;0x0F</para>
</listitem>
            <listitem><para><anchor xml:id="_group___r_c_c_1gaf70aaf70b0752ccb3a60307b2fb46038"/>#define <emphasis role="strong">BDCR_RTCEN_BB</emphasis>&#160;&#160;&#160;(<link linkend="_group___peripheral__memory__map_1gaed7efc100877000845c236ccdc9e144a">PERIPH_BB_BASE</link> + (BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))</para>
</listitem>
            <listitem><para><anchor xml:id="_group___r_c_c_1gae6718158034388d8fde8caaa28ffe8b9"/>#define <emphasis role="strong">BDRST_BitNumber</emphasis>&#160;&#160;&#160;0x10</para>
</listitem>
            <listitem><para><anchor xml:id="_group___r_c_c_1ga892fdf297b85b85cbaf0723649b31818"/>#define <emphasis role="strong">BDCR_BDRST_BB</emphasis>&#160;&#160;&#160;(<link linkend="_group___peripheral__memory__map_1gaed7efc100877000845c236ccdc9e144a">PERIPH_BB_BASE</link> + (BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))</para>
</listitem>
            <listitem><para><anchor xml:id="_group___r_c_c_1ga984cbe73312b6d3d355c5053763d499a"/>#define <emphasis role="strong">CSR_OFFSET</emphasis>&#160;&#160;&#160;(RCC_OFFSET + 0x74)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___r_c_c_1ga3f9dbe50769ce2a63ae12520433b9b40"/>#define <emphasis role="strong">LSION_BitNumber</emphasis>&#160;&#160;&#160;0x00</para>
</listitem>
            <listitem><para><anchor xml:id="_group___r_c_c_1gaa253e36e7e5fb02998c0e4d0388abc52"/>#define <emphasis role="strong">CSR_LSION_BB</emphasis>&#160;&#160;&#160;(<link linkend="_group___peripheral__memory__map_1gaed7efc100877000845c236ccdc9e144a">PERIPH_BB_BASE</link> + (CSR_OFFSET * 32) + (LSION_BitNumber * 4))</para>
</listitem>
            <listitem><para><anchor xml:id="_group___r_c_c_1gabd7dd9cf31a9cc27fd9c0c1624f9a298"/>#define <emphasis role="strong">CFGR_MCO2_RESET_MASK</emphasis>&#160;&#160;&#160;((uint32_t)0x07FFFFFF)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___r_c_c_1ga51f5130a66963090dc02b4ebd47e2f83"/>#define <emphasis role="strong">CFGR_MCO1_RESET_MASK</emphasis>&#160;&#160;&#160;((uint32_t)0xF89FFFFF)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___r_c_c_1ga890221cb651a3f30f6d1bca0d9b0e13d"/>#define <emphasis role="strong">FLAG_MASK</emphasis>&#160;&#160;&#160;((uint8_t)0x1F)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___r_c_c_1ga9b2724575bb34217aeddcb69c41a1547"/>#define <emphasis role="strong">CR_BYTE3_ADDRESS</emphasis>&#160;&#160;&#160;((uint32_t)0x40023802)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___r_c_c_1gaab58c3f3f81bf1ab9a14cf3fececd8c4"/>#define <emphasis role="strong">CIR_BYTE2_ADDRESS</emphasis>&#160;&#160;&#160;((uint32_t)(RCC_BASE + 0x0C + 0x01))</para>
</listitem>
            <listitem><para><anchor xml:id="_group___r_c_c_1ga43f47430582c9575970901533e525bb5"/>#define <emphasis role="strong">CIR_BYTE3_ADDRESS</emphasis>&#160;&#160;&#160;((uint32_t)(RCC_BASE + 0x0C + 0x02))</para>
</listitem>
            <listitem><para><anchor xml:id="_group___r_c_c_1ga40b5a415d697b6af7babd8a208c92435"/>#define <emphasis role="strong">BDCR_ADDRESS</emphasis>&#160;&#160;&#160;(<link linkend="_group___peripheral__memory__map_1ga9171f49478fa86d932f89e78e73b88b0">PERIPH_BASE</link> + BDCR_OFFSET)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_group___r_c_c_1ga413f6422be11b1334abe60b3bff2e062">RCC_DeInit</link> (void)</para>

<para>Resets the RCC clock configuration to the default reset state. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c_1ga523b06e73f6aa8a03e42299c855066a8">RCC_HSEConfig</link> (uint8_t RCC_HSE)</para>

<para>Configures the External High Speed oscillator (HSE). </para>
</listitem>
            <listitem><para>ErrorStatus <link linkend="_group___r_c_c_1gae0f15692614dd048ee4110a056f001dc">RCC_WaitForHSEStartUp</link> (void)</para>

<para>Waits for HSE start-up. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c_1gaa2d6a35f5c2e0f86317c3beb222677fc">RCC_AdjustHSICalibrationValue</link> (uint8_t HSICalibrationValue)</para>

<para>Adjusts the Internal High Speed oscillator (HSI) calibration value. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c_1ga0c6772a1e43765909495f57815ef69e2">RCC_HSICmd</link> (FunctionalState NewState)</para>

<para>Enables or disables the Internal High Speed oscillator (HSI). </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c_1ga65209ab5c3589b249c7d70f978735ca6">RCC_LSEConfig</link> (uint8_t RCC_LSE)</para>

<para>Configures the External Low Speed oscillator (LSE). </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c_1ga81e3ca29fd154ac2019bba6936d6d5ed">RCC_LSICmd</link> (FunctionalState NewState)</para>

<para>Enables or disables the Internal Low Speed oscillator (LSI). </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c_1ga154b93e90bfdede2a874244a1ff1002e">RCC_PLLConfig</link> (uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)</para>

<para>Configures the main PLL clock source, multiplication and division factors. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c_1ga84dee53c75e58fdb53571716593c2272">RCC_PLLCmd</link> (FunctionalState NewState)</para>

<para>Enables or disables the main PLL. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c_1ga4c15157382939a693c15620a4867e6ad">RCC_PLLI2SConfig</link> (uint32_t PLLI2SN, uint32_t PLLI2SR)</para>

<para>Configures the PLLI2S clock multiplication and division factors. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c_1ga2efe493a6337d5e0034bfcdfb0f541e4">RCC_PLLI2SCmd</link> (FunctionalState NewState)</para>

<para>Enables or disables the PLLI2S. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c_1ga0ff1fd7b9a8a49cdda11b7d7261c3494">RCC_ClockSecuritySystemCmd</link> (FunctionalState NewState)</para>

<para>Enables or disables the Clock Security System. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c_1ga15c9ecb6ef015ed008cb28e5b7a50531">RCC_MCO1Config</link> (uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)</para>

<para>Selects the clock source to output on MCO1 pin(PA8). </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c_1gaf50f10675b747de60c739e44e5c22aee">RCC_MCO2Config</link> (uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)</para>

<para>Selects the clock source to output on MCO2 pin(PC9). </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c_1ga3551a36a8f0a3dc96a74d6b939048337">RCC_SYSCLKConfig</link> (uint32_t RCC_SYSCLKSource)</para>

<para>Configures the system clock (SYSCLK). </para>
</listitem>
            <listitem><para>uint8_t <link linkend="_group___r_c_c_1gaaeb32311c208b2a980841c9c884a41ea">RCC_GetSYSCLKSource</link> (void)</para>

<para>Returns the clock source used as system clock. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c_1ga9d0aec72e236c6cdf3a3a82dfb525491">RCC_HCLKConfig</link> (uint32_t RCC_SYSCLK)</para>

<para>Configures the AHB clock (HCLK). </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c_1ga448137346d4292985d4e7a61dd1a824f">RCC_PCLK1Config</link> (uint32_t RCC_HCLK)</para>

<para>Configures the Low Speed APB clock (PCLK1). </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c_1ga09f9c010a4adca9e036da42c2ca6126a">RCC_PCLK2Config</link> (uint32_t RCC_HCLK)</para>

<para>Configures the High Speed APB clock (PCLK2). </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c_1ga3e9944fd1ed734275222bbb3e3f29993">RCC_GetClocksFreq</link> (<link linkend="_struct_r_c_c___clocks_type_def">RCC_ClocksTypeDef</link> *RCC_Clocks)</para>

<para>Returns the frequencies of different on chip clocks; SYSCLK, HCLK, PCLK1 and PCLK2. <?linebreak?> </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c_1ga1473d8a5a020642966359611c44181b0">RCC_RTCCLKConfig</link> (uint32_t RCC_RTCCLKSource)</para>

<para>Configures the RTC clock (RTCCLK). </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c_1ga9802f84846df2cea8e369234ed13b159">RCC_RTCCLKCmd</link> (FunctionalState NewState)</para>

<para>Enables or disables the RTC clock. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c_1ga636c3b72f35391e67f12a551b15fa54a">RCC_BackupResetCmd</link> (FunctionalState NewState)</para>

<para>Forces or releases the Backup domain reset. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c_1ga6c56f8529988fcc8f4dbffbc1bab27d0">RCC_I2SCLKConfig</link> (uint32_t RCC_I2SCLKSource)</para>

<para>Configures the I2S clock source (I2SCLK). </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c_1ga80c89116820d48bb38db2e7d5e5a49b9">RCC_AHB1PeriphClockCmd</link> (uint32_t RCC_AHB1Periph, FunctionalState NewState)</para>

<para>Enables or disables the AHB1 peripheral clock. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c_1gaadffedbd87e796f01d9776b8ee01ff5e">RCC_AHB2PeriphClockCmd</link> (uint32_t RCC_AHB2Periph, FunctionalState NewState)</para>

<para>Enables or disables the AHB2 peripheral clock. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c_1ga4eb8c119f2e9bf2bd2e042d27f151338">RCC_AHB3PeriphClockCmd</link> (uint32_t RCC_AHB3Periph, FunctionalState NewState)</para>

<para>Enables or disables the AHB3 peripheral clock. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c_1gaee7cc5d73af7fe1986fceff8afd3973e">RCC_APB1PeriphClockCmd</link> (uint32_t RCC_APB1Periph, FunctionalState NewState)</para>

<para>Enables or disables the Low Speed APB (APB1) peripheral clock. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c_1ga56ff55caf8d835351916b40dd030bc87">RCC_APB2PeriphClockCmd</link> (uint32_t RCC_APB2Periph, FunctionalState NewState)</para>

<para>Enables or disables the High Speed APB (APB2) peripheral clock. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c_1gaa7c450567f4731d4f0615f63586cad86">RCC_AHB1PeriphResetCmd</link> (uint32_t RCC_AHB1Periph, FunctionalState NewState)</para>

<para>Forces or releases AHB1 peripheral reset. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c_1gafb119d6d1955d1b8c361e8140845ac5a">RCC_AHB2PeriphResetCmd</link> (uint32_t RCC_AHB2Periph, FunctionalState NewState)</para>

<para>Forces or releases AHB2 peripheral reset. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c_1gaee44f159a1ca9ebdd7117bff387cd592">RCC_AHB3PeriphResetCmd</link> (uint32_t RCC_AHB3Periph, FunctionalState NewState)</para>

<para>Forces or releases AHB3 peripheral reset. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c_1gab197ae4369c10b92640a733b40ed2801">RCC_APB1PeriphResetCmd</link> (uint32_t RCC_APB1Periph, FunctionalState NewState)</para>

<para>Forces or releases Low Speed APB (APB1) peripheral reset. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c_1gad94553850ac07106a27ee85fec37efdf">RCC_APB2PeriphResetCmd</link> (uint32_t RCC_APB2Periph, FunctionalState NewState)</para>

<para>Forces or releases High Speed APB (APB2) peripheral reset. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c_1ga5cd0d5adbc7496d7005b208bd19ce255">RCC_AHB1PeriphClockLPModeCmd</link> (uint32_t RCC_AHB1Periph, FunctionalState NewState)</para>

<para>Enables or disables the AHB1 peripheral clock during Low Power (Sleep) mode. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c_1ga1ac5bb9676ae9b48e50d6a95de922ce3">RCC_AHB2PeriphClockLPModeCmd</link> (uint32_t RCC_AHB2Periph, FunctionalState NewState)</para>

<para>Enables or disables the AHB2 peripheral clock during Low Power (Sleep) mode. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c_1ga4e1df07cdfd81c068902d9d35fcc3911">RCC_AHB3PeriphClockLPModeCmd</link> (uint32_t RCC_AHB3Periph, FunctionalState NewState)</para>

<para>Enables or disables the AHB3 peripheral clock during Low Power (Sleep) mode. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c_1ga84dd64badb84768cbcf19e241cadff50">RCC_APB1PeriphClockLPModeCmd</link> (uint32_t RCC_APB1Periph, FunctionalState NewState)</para>

<para>Enables or disables the APB1 peripheral clock during Low Power (Sleep) mode. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c_1ga30365b9e0b4c5d7e98c2675c862ddd7e">RCC_APB2PeriphClockLPModeCmd</link> (uint32_t RCC_APB2Periph, FunctionalState NewState)</para>

<para>Enables or disables the APB2 peripheral clock during Low Power (Sleep) mode. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c_1gaa953aa226e9ce45300d535941e4dfe2f">RCC_ITConfig</link> (uint8_t RCC_IT, FunctionalState NewState)</para>

<para>Enables or disables the specified RCC interrupts. </para>
</listitem>
            <listitem><para>FlagStatus <link linkend="_group___r_c_c_1ga2897bdc52f272031c44fb1f72205d295">RCC_GetFlagStatus</link> (uint8_t RCC_FLAG)</para>

<para>Checks whether the specified RCC flag is set or not. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c_1ga53f909dbb15a54124419084ebda97d72">RCC_ClearFlag</link> (void)</para>

<para>Clears the RCC reset flags. The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST, RCC_FLAG_SFTRST, RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST. </para>
</listitem>
            <listitem><para>ITStatus <link linkend="_group___r_c_c_1ga6126c99f398ee4be410ad76ae3aee18f">RCC_GetITStatus</link> (uint8_t RCC_IT)</para>

<para>Checks whether the specified RCC interrupt has occurred or not. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c_1ga529842d165910f8f87e26115da36089b">RCC_ClearITPendingBit</link> (uint8_t RCC_IT)</para>

<para>Clears the RCC&apos;s interrupt pending bits. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>RCC driver modules. </para>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_group___r_c_c_1gaa2d6a35f5c2e0f86317c3beb222677fc"/><section>
    <title>RCC_AdjustHSICalibrationValue()</title>
<indexterm><primary>RCC_AdjustHSICalibrationValue</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_AdjustHSICalibrationValue</secondary></indexterm>
<para><computeroutput>void RCC_AdjustHSICalibrationValue (uint8_t HSICalibrationValue)</computeroutput></para><para>

<para>Adjusts the Internal High Speed oscillator (HSI) calibration value. </para>
</para>

<para><note><title>Note</title>

<para>The calibration is used to compensate for the variations in voltage and temperature that influence the frequency of the internal HSI RC. </para>
</note>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>HSICalibrationValue</entry><entry>
<para>specifies the calibration trimming value. This parameter must be a number between 0 and 0x1F. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1ga80c89116820d48bb38db2e7d5e5a49b9"/><section>
    <title>RCC_AHB1PeriphClockCmd()</title>
<indexterm><primary>RCC_AHB1PeriphClockCmd</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_AHB1PeriphClockCmd</secondary></indexterm>
<para><computeroutput>void RCC_AHB1PeriphClockCmd (uint32_t RCC_AHB1Periph, FunctionalState NewState)</computeroutput></para><para>

<para>Enables or disables the AHB1 peripheral clock. </para>
</para>

<para><note><title>Note</title>

<para>After reset, the peripheral clock (used for registers read/write access) is disabled and the application software has to enable this clock before using it. <?linebreak?> </para>
</note>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>RCC_AHBPeriph</entry><entry>
<para>specifies the AHB1 peripheral to gates its clock. This parameter can be any combination of the following values: <itemizedlist>
<listitem>
<para>RCC_AHB1Periph_GPIOA: GPIOA clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_GPIOB: GPIOB clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_GPIOC: GPIOC clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_GPIOD: GPIOD clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_GPIOE: GPIOE clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_GPIOF: GPIOF clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_GPIOG: GPIOG clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_GPIOG: GPIOG clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_GPIOI: GPIOI clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_CRC: CRC clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_BKPSRAM: BKPSRAM interface clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_CCMDATARAMEN CCM data RAM interface clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_DMA1: DMA1 clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_DMA2: DMA2 clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_ETH_MAC: Ethernet MAC clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_ETH_MAC_Tx: Ethernet Transmission clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_ETH_MAC_Rx: Ethernet Reception clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_OTG_HS: USB OTG HS clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock </para>
</listitem>
</itemizedlist>
</para>
</entry>
                            </row>
                            <row>
<entry>NewState</entry><entry>
<para>new state of the specified peripheral clock. This parameter can be: ENABLE or DISABLE. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1ga5cd0d5adbc7496d7005b208bd19ce255"/><section>
    <title>RCC_AHB1PeriphClockLPModeCmd()</title>
<indexterm><primary>RCC_AHB1PeriphClockLPModeCmd</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_AHB1PeriphClockLPModeCmd</secondary></indexterm>
<para><computeroutput>void RCC_AHB1PeriphClockLPModeCmd (uint32_t RCC_AHB1Periph, FunctionalState NewState)</computeroutput></para><para>

<para>Enables or disables the AHB1 peripheral clock during Low Power (Sleep) mode. </para>
</para>

<para><note><title>Note</title>

<para>Peripheral clock gating in SLEEP mode can be used to further reduce power consumption. </para>

<para>After wakeup from SLEEP mode, the peripheral clock is enabled again. </para>

<para>By default, all peripheral clocks are enabled during SLEEP mode. </para>
</note>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>RCC_AHBPeriph</entry><entry>
<para>specifies the AHB1 peripheral to gates its clock. This parameter can be any combination of the following values: <itemizedlist>
<listitem>
<para>RCC_AHB1Periph_GPIOA: GPIOA clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_GPIOB: GPIOB clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_GPIOC: GPIOC clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_GPIOD: GPIOD clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_GPIOE: GPIOE clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_GPIOF: GPIOF clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_GPIOG: GPIOG clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_GPIOG: GPIOG clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_GPIOI: GPIOI clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_CRC: CRC clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_BKPSRAM: BKPSRAM interface clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_DMA1: DMA1 clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_DMA2: DMA2 clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_ETH_MAC: Ethernet MAC clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_ETH_MAC_Tx: Ethernet Transmission clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_ETH_MAC_Rx: Ethernet Reception clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_OTG_HS: USB OTG HS clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock </para>
</listitem>
</itemizedlist>
</para>
</entry>
                            </row>
                            <row>
<entry>NewState</entry><entry>
<para>new state of the specified peripheral clock. This parameter can be: ENABLE or DISABLE. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1gaa7c450567f4731d4f0615f63586cad86"/><section>
    <title>RCC_AHB1PeriphResetCmd()</title>
<indexterm><primary>RCC_AHB1PeriphResetCmd</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_AHB1PeriphResetCmd</secondary></indexterm>
<para><computeroutput>void RCC_AHB1PeriphResetCmd (uint32_t RCC_AHB1Periph, FunctionalState NewState)</computeroutput></para><para>

<para>Forces or releases AHB1 peripheral reset. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>RCC_AHB1Periph</entry><entry>
<para>specifies the AHB1 peripheral to reset. This parameter can be any combination of the following values: <itemizedlist>
<listitem>
<para>RCC_AHB1Periph_GPIOA: GPIOA clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_GPIOB: GPIOB clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_GPIOC: GPIOC clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_GPIOD: GPIOD clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_GPIOE: GPIOE clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_GPIOF: GPIOF clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_GPIOG: GPIOG clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_GPIOG: GPIOG clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_GPIOI: GPIOI clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_CRC: CRC clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_DMA1: DMA1 clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_DMA2: DMA2 clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_ETH_MAC: Ethernet MAC clock </para>
</listitem>
<listitem>
<para>RCC_AHB1Periph_OTG_HS: USB OTG HS clock</para>
</listitem>
</itemizedlist>
</para>
</entry>
                            </row>
                            <row>
<entry>NewState</entry><entry>
<para>new state of the specified peripheral reset. This parameter can be: ENABLE or DISABLE. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1gaadffedbd87e796f01d9776b8ee01ff5e"/><section>
    <title>RCC_AHB2PeriphClockCmd()</title>
<indexterm><primary>RCC_AHB2PeriphClockCmd</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_AHB2PeriphClockCmd</secondary></indexterm>
<para><computeroutput>void RCC_AHB2PeriphClockCmd (uint32_t RCC_AHB2Periph, FunctionalState NewState)</computeroutput></para><para>

<para>Enables or disables the AHB2 peripheral clock. </para>
</para>

<para><note><title>Note</title>

<para>After reset, the peripheral clock (used for registers read/write access) is disabled and the application software has to enable this clock before using it. </para>
</note>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>RCC_AHBPeriph</entry><entry>
<para>specifies the AHB2 peripheral to gates its clock. This parameter can be any combination of the following values: <itemizedlist>
<listitem>
<para>RCC_AHB2Periph_DCMI: DCMI clock </para>
</listitem>
<listitem>
<para>RCC_AHB2Periph_CRYP: CRYP clock </para>
</listitem>
<listitem>
<para>RCC_AHB2Periph_HASH: HASH clock </para>
</listitem>
<listitem>
<para>RCC_AHB2Periph_RNG: RNG clock </para>
</listitem>
<listitem>
<para>RCC_AHB2Periph_OTG_FS: USB OTG FS clock </para>
</listitem>
</itemizedlist>
</para>
</entry>
                            </row>
                            <row>
<entry>NewState</entry><entry>
<para>new state of the specified peripheral clock. This parameter can be: ENABLE or DISABLE. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1ga1ac5bb9676ae9b48e50d6a95de922ce3"/><section>
    <title>RCC_AHB2PeriphClockLPModeCmd()</title>
<indexterm><primary>RCC_AHB2PeriphClockLPModeCmd</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_AHB2PeriphClockLPModeCmd</secondary></indexterm>
<para><computeroutput>void RCC_AHB2PeriphClockLPModeCmd (uint32_t RCC_AHB2Periph, FunctionalState NewState)</computeroutput></para><para>

<para>Enables or disables the AHB2 peripheral clock during Low Power (Sleep) mode. </para>
</para>

<para><note><title>Note</title>

<para>Peripheral clock gating in SLEEP mode can be used to further reduce power consumption. </para>

<para>After wakeup from SLEEP mode, the peripheral clock is enabled again. </para>

<para>By default, all peripheral clocks are enabled during SLEEP mode. </para>
</note>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>RCC_AHBPeriph</entry><entry>
<para>specifies the AHB2 peripheral to gates its clock. This parameter can be any combination of the following values: <itemizedlist>
<listitem>
<para>RCC_AHB2Periph_DCMI: DCMI clock </para>
</listitem>
<listitem>
<para>RCC_AHB2Periph_CRYP: CRYP clock </para>
</listitem>
<listitem>
<para>RCC_AHB2Periph_HASH: HASH clock </para>
</listitem>
<listitem>
<para>RCC_AHB2Periph_RNG: RNG clock </para>
</listitem>
<listitem>
<para>RCC_AHB2Periph_OTG_FS: USB OTG FS clock <?linebreak?> </para>
</listitem>
</itemizedlist>
</para>
</entry>
                            </row>
                            <row>
<entry>NewState</entry><entry>
<para>new state of the specified peripheral clock. This parameter can be: ENABLE or DISABLE. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1gafb119d6d1955d1b8c361e8140845ac5a"/><section>
    <title>RCC_AHB2PeriphResetCmd()</title>
<indexterm><primary>RCC_AHB2PeriphResetCmd</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_AHB2PeriphResetCmd</secondary></indexterm>
<para><computeroutput>void RCC_AHB2PeriphResetCmd (uint32_t RCC_AHB2Periph, FunctionalState NewState)</computeroutput></para><para>

<para>Forces or releases AHB2 peripheral reset. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>RCC_AHB2Periph</entry><entry>
<para>specifies the AHB2 peripheral to reset. This parameter can be any combination of the following values: <itemizedlist>
<listitem>
<para>RCC_AHB2Periph_DCMI: DCMI clock </para>
</listitem>
<listitem>
<para>RCC_AHB2Periph_CRYP: CRYP clock </para>
</listitem>
<listitem>
<para>RCC_AHB2Periph_HASH: HASH clock </para>
</listitem>
<listitem>
<para>RCC_AHB2Periph_RNG: RNG clock </para>
</listitem>
<listitem>
<para>RCC_AHB2Periph_OTG_FS: USB OTG FS clock </para>
</listitem>
</itemizedlist>
</para>
</entry>
                            </row>
                            <row>
<entry>NewState</entry><entry>
<para>new state of the specified peripheral reset. This parameter can be: ENABLE or DISABLE. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1ga4eb8c119f2e9bf2bd2e042d27f151338"/><section>
    <title>RCC_AHB3PeriphClockCmd()</title>
<indexterm><primary>RCC_AHB3PeriphClockCmd</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_AHB3PeriphClockCmd</secondary></indexterm>
<para><computeroutput>void RCC_AHB3PeriphClockCmd (uint32_t RCC_AHB3Periph, FunctionalState NewState)</computeroutput></para><para>

<para>Enables or disables the AHB3 peripheral clock. </para>
</para>

<para><note><title>Note</title>

<para>After reset, the peripheral clock (used for registers read/write access) is disabled and the application software has to enable this clock before using it. </para>
</note>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>RCC_AHBPeriph</entry><entry>
<para>specifies the AHB3 peripheral to gates its clock. This parameter must be: RCC_AHB3Periph_FSMC </para>
</entry>
                            </row>
                            <row>
<entry>NewState</entry><entry>
<para>new state of the specified peripheral clock. This parameter can be: ENABLE or DISABLE. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1ga4e1df07cdfd81c068902d9d35fcc3911"/><section>
    <title>RCC_AHB3PeriphClockLPModeCmd()</title>
<indexterm><primary>RCC_AHB3PeriphClockLPModeCmd</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_AHB3PeriphClockLPModeCmd</secondary></indexterm>
<para><computeroutput>void RCC_AHB3PeriphClockLPModeCmd (uint32_t RCC_AHB3Periph, FunctionalState NewState)</computeroutput></para><para>

<para>Enables or disables the AHB3 peripheral clock during Low Power (Sleep) mode. </para>
</para>

<para><note><title>Note</title>

<para>Peripheral clock gating in SLEEP mode can be used to further reduce power consumption. </para>

<para>After wakeup from SLEEP mode, the peripheral clock is enabled again. </para>

<para>By default, all peripheral clocks are enabled during SLEEP mode. </para>
</note>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>RCC_AHBPeriph</entry><entry>
<para>specifies the AHB3 peripheral to gates its clock. This parameter must be: RCC_AHB3Periph_FSMC </para>
</entry>
                            </row>
                            <row>
<entry>NewState</entry><entry>
<para>new state of the specified peripheral clock. This parameter can be: ENABLE or DISABLE. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1gaee44f159a1ca9ebdd7117bff387cd592"/><section>
    <title>RCC_AHB3PeriphResetCmd()</title>
<indexterm><primary>RCC_AHB3PeriphResetCmd</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_AHB3PeriphResetCmd</secondary></indexterm>
<para><computeroutput>void RCC_AHB3PeriphResetCmd (uint32_t RCC_AHB3Periph, FunctionalState NewState)</computeroutput></para><para>

<para>Forces or releases AHB3 peripheral reset. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>RCC_AHB3Periph</entry><entry>
<para>specifies the AHB3 peripheral to reset. This parameter must be: RCC_AHB3Periph_FSMC </para>
</entry>
                            </row>
                            <row>
<entry>NewState</entry><entry>
<para>new state of the specified peripheral reset. This parameter can be: ENABLE or DISABLE. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1gaee7cc5d73af7fe1986fceff8afd3973e"/><section>
    <title>RCC_APB1PeriphClockCmd()</title>
<indexterm><primary>RCC_APB1PeriphClockCmd</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_APB1PeriphClockCmd</secondary></indexterm>
<para><computeroutput>void RCC_APB1PeriphClockCmd (uint32_t RCC_APB1Periph, FunctionalState NewState)</computeroutput></para><para>

<para>Enables or disables the Low Speed APB (APB1) peripheral clock. </para>
</para>

<para><note><title>Note</title>

<para>After reset, the peripheral clock (used for registers read/write access) is disabled and the application software has to enable this clock before using it. </para>
</note>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>RCC_APB1Periph</entry><entry>
<para>specifies the APB1 peripheral to gates its clock. This parameter can be any combination of the following values: <itemizedlist>
<listitem>
<para>RCC_APB1Periph_TIM2: TIM2 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_TIM3: TIM3 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_TIM4: TIM4 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_TIM5: TIM5 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_TIM6: TIM6 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_TIM7: TIM7 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_TIM12: TIM12 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_TIM13: TIM13 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_TIM14: TIM14 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_WWDG: WWDG clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_SPI2: SPI2 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_SPI3: SPI3 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_USART2: USART2 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_USART3: USART3 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_UART4: UART4 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_UART5: UART5 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_I2C1: I2C1 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_I2C2: I2C2 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_I2C3: I2C3 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_CAN1: CAN1 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_CAN2: CAN2 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_PWR: PWR clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_DAC: DAC clock </para>
</listitem>
</itemizedlist>
</para>
</entry>
                            </row>
                            <row>
<entry>NewState</entry><entry>
<para>new state of the specified peripheral clock. This parameter can be: ENABLE or DISABLE. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1ga84dd64badb84768cbcf19e241cadff50"/><section>
    <title>RCC_APB1PeriphClockLPModeCmd()</title>
<indexterm><primary>RCC_APB1PeriphClockLPModeCmd</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_APB1PeriphClockLPModeCmd</secondary></indexterm>
<para><computeroutput>void RCC_APB1PeriphClockLPModeCmd (uint32_t RCC_APB1Periph, FunctionalState NewState)</computeroutput></para><para>

<para>Enables or disables the APB1 peripheral clock during Low Power (Sleep) mode. </para>
</para>

<para><note><title>Note</title>

<para>Peripheral clock gating in SLEEP mode can be used to further reduce power consumption. </para>

<para>After wakeup from SLEEP mode, the peripheral clock is enabled again. </para>

<para>By default, all peripheral clocks are enabled during SLEEP mode. </para>
</note>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>RCC_APB1Periph</entry><entry>
<para>specifies the APB1 peripheral to gates its clock. This parameter can be any combination of the following values: <itemizedlist>
<listitem>
<para>RCC_APB1Periph_TIM2: TIM2 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_TIM3: TIM3 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_TIM4: TIM4 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_TIM5: TIM5 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_TIM6: TIM6 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_TIM7: TIM7 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_TIM12: TIM12 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_TIM13: TIM13 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_TIM14: TIM14 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_WWDG: WWDG clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_SPI2: SPI2 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_SPI3: SPI3 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_USART2: USART2 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_USART3: USART3 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_UART4: UART4 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_UART5: UART5 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_I2C1: I2C1 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_I2C2: I2C2 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_I2C3: I2C3 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_CAN1: CAN1 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_CAN2: CAN2 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_PWR: PWR clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_DAC: DAC clock </para>
</listitem>
</itemizedlist>
</para>
</entry>
                            </row>
                            <row>
<entry>NewState</entry><entry>
<para>new state of the specified peripheral clock. This parameter can be: ENABLE or DISABLE. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1gab197ae4369c10b92640a733b40ed2801"/><section>
    <title>RCC_APB1PeriphResetCmd()</title>
<indexterm><primary>RCC_APB1PeriphResetCmd</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_APB1PeriphResetCmd</secondary></indexterm>
<para><computeroutput>void RCC_APB1PeriphResetCmd (uint32_t RCC_APB1Periph, FunctionalState NewState)</computeroutput></para><para>

<para>Forces or releases Low Speed APB (APB1) peripheral reset. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>RCC_APB1Periph</entry><entry>
<para>specifies the APB1 peripheral to reset. This parameter can be any combination of the following values: <itemizedlist>
<listitem>
<para>RCC_APB1Periph_TIM2: TIM2 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_TIM3: TIM3 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_TIM4: TIM4 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_TIM5: TIM5 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_TIM6: TIM6 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_TIM7: TIM7 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_TIM12: TIM12 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_TIM13: TIM13 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_TIM14: TIM14 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_WWDG: WWDG clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_SPI2: SPI2 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_SPI3: SPI3 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_USART2: USART2 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_USART3: USART3 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_UART4: UART4 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_UART5: UART5 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_I2C1: I2C1 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_I2C2: I2C2 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_I2C3: I2C3 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_CAN1: CAN1 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_CAN2: CAN2 clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_PWR: PWR clock </para>
</listitem>
<listitem>
<para>RCC_APB1Periph_DAC: DAC clock </para>
</listitem>
</itemizedlist>
</para>
</entry>
                            </row>
                            <row>
<entry>NewState</entry><entry>
<para>new state of the specified peripheral reset. This parameter can be: ENABLE or DISABLE. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1ga56ff55caf8d835351916b40dd030bc87"/><section>
    <title>RCC_APB2PeriphClockCmd()</title>
<indexterm><primary>RCC_APB2PeriphClockCmd</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_APB2PeriphClockCmd</secondary></indexterm>
<para><computeroutput>void RCC_APB2PeriphClockCmd (uint32_t RCC_APB2Periph, FunctionalState NewState)</computeroutput></para><para>

<para>Enables or disables the High Speed APB (APB2) peripheral clock. </para>
</para>

<para><note><title>Note</title>

<para>After reset, the peripheral clock (used for registers read/write access) is disabled and the application software has to enable this clock before using it. </para>
</note>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>RCC_APB2Periph</entry><entry>
<para>specifies the APB2 peripheral to gates its clock. This parameter can be any combination of the following values: <itemizedlist>
<listitem>
<para>RCC_APB2Periph_TIM1: TIM1 clock </para>
</listitem>
<listitem>
<para>RCC_APB2Periph_TIM8: TIM8 clock </para>
</listitem>
<listitem>
<para>RCC_APB2Periph_USART1: USART1 clock </para>
</listitem>
<listitem>
<para>RCC_APB2Periph_USART6: USART6 clock </para>
</listitem>
<listitem>
<para>RCC_APB2Periph_ADC1: ADC1 clock </para>
</listitem>
<listitem>
<para>RCC_APB2Periph_ADC2: ADC2 clock </para>
</listitem>
<listitem>
<para>RCC_APB2Periph_ADC3: ADC3 clock </para>
</listitem>
<listitem>
<para>RCC_APB2Periph_SDIO: SDIO clock </para>
</listitem>
<listitem>
<para>RCC_APB2Periph_SPI1: SPI1 clock </para>
</listitem>
<listitem>
<para>RCC_APB2Periph_SYSCFG: SYSCFG clock </para>
</listitem>
<listitem>
<para>RCC_APB2Periph_TIM9: TIM9 clock </para>
</listitem>
<listitem>
<para>RCC_APB2Periph_TIM10: TIM10 clock </para>
</listitem>
<listitem>
<para>RCC_APB2Periph_TIM11: TIM11 clock </para>
</listitem>
</itemizedlist>
</para>
</entry>
                            </row>
                            <row>
<entry>NewState</entry><entry>
<para>new state of the specified peripheral clock. This parameter can be: ENABLE or DISABLE. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1ga30365b9e0b4c5d7e98c2675c862ddd7e"/><section>
    <title>RCC_APB2PeriphClockLPModeCmd()</title>
<indexterm><primary>RCC_APB2PeriphClockLPModeCmd</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_APB2PeriphClockLPModeCmd</secondary></indexterm>
<para><computeroutput>void RCC_APB2PeriphClockLPModeCmd (uint32_t RCC_APB2Periph, FunctionalState NewState)</computeroutput></para><para>

<para>Enables or disables the APB2 peripheral clock during Low Power (Sleep) mode. </para>
</para>

<para><note><title>Note</title>

<para>Peripheral clock gating in SLEEP mode can be used to further reduce power consumption. </para>

<para>After wakeup from SLEEP mode, the peripheral clock is enabled again. </para>

<para>By default, all peripheral clocks are enabled during SLEEP mode. </para>
</note>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>RCC_APB2Periph</entry><entry>
<para>specifies the APB2 peripheral to gates its clock. This parameter can be any combination of the following values: <itemizedlist>
<listitem>
<para>RCC_APB2Periph_TIM1: TIM1 clock </para>
</listitem>
<listitem>
<para>RCC_APB2Periph_TIM8: TIM8 clock </para>
</listitem>
<listitem>
<para>RCC_APB2Periph_USART1: USART1 clock </para>
</listitem>
<listitem>
<para>RCC_APB2Periph_USART6: USART6 clock </para>
</listitem>
<listitem>
<para>RCC_APB2Periph_ADC1: ADC1 clock </para>
</listitem>
<listitem>
<para>RCC_APB2Periph_ADC2: ADC2 clock </para>
</listitem>
<listitem>
<para>RCC_APB2Periph_ADC3: ADC3 clock </para>
</listitem>
<listitem>
<para>RCC_APB2Periph_SDIO: SDIO clock </para>
</listitem>
<listitem>
<para>RCC_APB2Periph_SPI1: SPI1 clock </para>
</listitem>
<listitem>
<para>RCC_APB2Periph_SYSCFG: SYSCFG clock </para>
</listitem>
<listitem>
<para>RCC_APB2Periph_TIM9: TIM9 clock </para>
</listitem>
<listitem>
<para>RCC_APB2Periph_TIM10: TIM10 clock </para>
</listitem>
<listitem>
<para>RCC_APB2Periph_TIM11: TIM11 clock </para>
</listitem>
</itemizedlist>
</para>
</entry>
                            </row>
                            <row>
<entry>NewState</entry><entry>
<para>new state of the specified peripheral clock. This parameter can be: ENABLE or DISABLE. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1gad94553850ac07106a27ee85fec37efdf"/><section>
    <title>RCC_APB2PeriphResetCmd()</title>
<indexterm><primary>RCC_APB2PeriphResetCmd</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_APB2PeriphResetCmd</secondary></indexterm>
<para><computeroutput>void RCC_APB2PeriphResetCmd (uint32_t RCC_APB2Periph, FunctionalState NewState)</computeroutput></para><para>

<para>Forces or releases High Speed APB (APB2) peripheral reset. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>RCC_APB2Periph</entry><entry>
<para>specifies the APB2 peripheral to reset. This parameter can be any combination of the following values: <itemizedlist>
<listitem>
<para>RCC_APB2Periph_TIM1: TIM1 clock </para>
</listitem>
<listitem>
<para>RCC_APB2Periph_TIM8: TIM8 clock </para>
</listitem>
<listitem>
<para>RCC_APB2Periph_USART1: USART1 clock </para>
</listitem>
<listitem>
<para>RCC_APB2Periph_USART6: USART6 clock </para>
</listitem>
<listitem>
<para>RCC_APB2Periph_ADC1: ADC1 clock </para>
</listitem>
<listitem>
<para>RCC_APB2Periph_ADC2: ADC2 clock </para>
</listitem>
<listitem>
<para>RCC_APB2Periph_ADC3: ADC3 clock </para>
</listitem>
<listitem>
<para>RCC_APB2Periph_SDIO: SDIO clock </para>
</listitem>
<listitem>
<para>RCC_APB2Periph_SPI1: SPI1 clock </para>
</listitem>
<listitem>
<para>RCC_APB2Periph_SYSCFG: SYSCFG clock </para>
</listitem>
<listitem>
<para>RCC_APB2Periph_TIM9: TIM9 clock </para>
</listitem>
<listitem>
<para>RCC_APB2Periph_TIM10: TIM10 clock </para>
</listitem>
<listitem>
<para>RCC_APB2Periph_TIM11: TIM11 clock </para>
</listitem>
</itemizedlist>
</para>
</entry>
                            </row>
                            <row>
<entry>NewState</entry><entry>
<para>new state of the specified peripheral reset. This parameter can be: ENABLE or DISABLE. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1ga636c3b72f35391e67f12a551b15fa54a"/><section>
    <title>RCC_BackupResetCmd()</title>
<indexterm><primary>RCC_BackupResetCmd</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_BackupResetCmd</secondary></indexterm>
<para><computeroutput>void RCC_BackupResetCmd (FunctionalState NewState)</computeroutput></para><para>

<para>Forces or releases the Backup domain reset. </para>
</para>

<para><note><title>Note</title>

<para>This function resets the RTC peripheral (including the backup registers) and the RTC clock source selection in RCC_CSR register. </para>

<para>The BKPSRAM is not affected by this reset. <?linebreak?> </para>
</note>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>NewState</entry><entry>
<para>new state of the Backup domain reset. This parameter can be: ENABLE or DISABLE. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1ga53f909dbb15a54124419084ebda97d72"/><section>
    <title>RCC_ClearFlag()</title>
<indexterm><primary>RCC_ClearFlag</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_ClearFlag</secondary></indexterm>
<para><computeroutput>void RCC_ClearFlag (void )</computeroutput></para><para>

<para>Clears the RCC reset flags. The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST, RCC_FLAG_SFTRST, RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1ga529842d165910f8f87e26115da36089b"/><section>
    <title>RCC_ClearITPendingBit()</title>
<indexterm><primary>RCC_ClearITPendingBit</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_ClearITPendingBit</secondary></indexterm>
<para><computeroutput>void RCC_ClearITPendingBit (uint8_t RCC_IT)</computeroutput></para><para>

<para>Clears the RCC&apos;s interrupt pending bits. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>RCC_IT</entry><entry>
<para>specifies the interrupt pending bit to clear. This parameter can be any combination of the following values: <itemizedlist>
<listitem>
<para>RCC_IT_LSIRDY: LSI ready interrupt </para>
</listitem>
<listitem>
<para>RCC_IT_LSERDY: LSE ready interrupt </para>
</listitem>
<listitem>
<para>RCC_IT_HSIRDY: HSI ready interrupt </para>
</listitem>
<listitem>
<para>RCC_IT_HSERDY: HSE ready interrupt </para>
</listitem>
<listitem>
<para>RCC_IT_PLLRDY: main PLL ready interrupt </para>
</listitem>
<listitem>
<para>RCC_IT_PLLI2SRDY: PLLI2S ready interrupt <?linebreak?> </para>
</listitem>
<listitem>
<para>RCC_IT_CSS: Clock Security System interrupt </para>
</listitem>
</itemizedlist>
</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1ga0ff1fd7b9a8a49cdda11b7d7261c3494"/><section>
    <title>RCC_ClockSecuritySystemCmd()</title>
<indexterm><primary>RCC_ClockSecuritySystemCmd</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_ClockSecuritySystemCmd</secondary></indexterm>
<para><computeroutput>void RCC_ClockSecuritySystemCmd (FunctionalState NewState)</computeroutput></para><para>

<para>Enables or disables the Clock Security System. </para>
</para>

<para><note><title>Note</title>

<para>If a failure is detected on the HSE oscillator clock, this oscillator is automatically disabled and an interrupt is generated to inform the software about the failure (Clock Security System Interrupt, CSSI), allowing the MCU to perform rescue operations. The CSSI is linked to the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector. <?linebreak?> </para>
</note>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>NewState</entry><entry>
<para>new state of the Clock Security System. This parameter can be: ENABLE or DISABLE. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1ga413f6422be11b1334abe60b3bff2e062"/><section>
    <title>RCC_DeInit()</title>
<indexterm><primary>RCC_DeInit</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_DeInit</secondary></indexterm>
<para><computeroutput>void RCC_DeInit (void )</computeroutput></para><para>

<para>Resets the RCC clock configuration to the default reset state. </para>
</para>

<para><note><title>Note</title>

<para>The default reset state of the clock configuration is given below:<itemizedlist>
<listitem>
<para>HSI ON and used as system clock source</para>
</listitem><listitem>
<para>HSE, PLL and PLLI2S OFF</para>
</listitem><listitem>
<para>AHB, APB1 and APB2 prescaler set to 1.</para>
</listitem><listitem>
<para>CSS, MCO1 and MCO2 OFF</para>
</listitem><listitem>
<para>All interrupts disabled </para>
</listitem></itemizedlist>
</para>

<para>This function doesn&apos;t modify the configuration of the<itemizedlist>
<listitem>
<para>Peripheral clocks</para>
</listitem><listitem>
<para>LSI, LSE and RTC clocks </para>
</listitem></itemizedlist>
</para>
</note>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1ga3e9944fd1ed734275222bbb3e3f29993"/><section>
    <title>RCC_GetClocksFreq()</title>
<indexterm><primary>RCC_GetClocksFreq</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_GetClocksFreq</secondary></indexterm>
<para><computeroutput>void RCC_GetClocksFreq (<link linkend="_struct_r_c_c___clocks_type_def">RCC_ClocksTypeDef</link> * RCC_Clocks)</computeroutput></para><para>

<para>Returns the frequencies of different on chip clocks; SYSCLK, HCLK, PCLK1 and PCLK2. <?linebreak?> </para>
</para>

<para><note><title>Note</title>

<para>The system frequency computed by this function is not the real frequency in the chip. It is calculated based on the predefined constant and the selected clock source: </para>

<para>If SYSCLK source is HSI, function returns values based on <link linkend="_group___library__configuration__section_1gaaa8c76e274d0f6dd2cefb5d0b17fbc37">HSI_VALUE(*)</link> </para>

<para>If SYSCLK source is HSE, function returns values based on <link linkend="_group___library__configuration__section_1gaeafcff4f57440c60e64812dddd13e7cb">HSE_VALUE(**)</link> </para>

<para>If SYSCLK source is PLL, function returns values based on <link linkend="_group___library__configuration__section_1gaeafcff4f57440c60e64812dddd13e7cb">HSE_VALUE(**)</link> or <link linkend="_group___library__configuration__section_1gaaa8c76e274d0f6dd2cefb5d0b17fbc37">HSI_VALUE(*)</link> multiplied/divided by the PLL factors. <?linebreak?> </para>

<para>(*) HSI_VALUE is a constant defined in <link linkend="_stm32f4xx_8h">stm32f4xx.h</link> file (default value 16 MHz) but the real value may vary depending on the variations in voltage and temperature. </para>

<para>(**) HSE_VALUE is a constant defined in <link linkend="_stm32f4xx_8h">stm32f4xx.h</link> file (default value 25 MHz), user has to ensure that HSE_VALUE is same as the real frequency of the crystal used. Otherwise, this function may have wrong result.</para>

<para>The result of this function could be not correct when using fractional value for HSE crystal.</para>
</note>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>RCC_Clocks</entry><entry>
<para>pointer to a <link linkend="_struct_r_c_c___clocks_type_def">RCC_ClocksTypeDef</link> structure which will hold the clocks frequencies.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <note><title>Note</title>

<para>This function can be used by the user application to compute the baudrate for the communication peripherals or configure other parameters. </para>

<para>Each time SYSCLK, HCLK, PCLK1 and/or PCLK2 clock changes, this function must be called to update the structure&apos;s field. Otherwise, any configuration based on this function will be incorrect.</para>
</note>

                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1ga2897bdc52f272031c44fb1f72205d295"/><section>
    <title>RCC_GetFlagStatus()</title>
<indexterm><primary>RCC_GetFlagStatus</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_GetFlagStatus</secondary></indexterm>
<para><computeroutput>FlagStatus RCC_GetFlagStatus (uint8_t RCC_FLAG)</computeroutput></para><para>

<para>Checks whether the specified RCC flag is set or not. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>RCC_FLAG</entry><entry>
<para>specifies the flag to check. This parameter can be one of the following values: <itemizedlist>
<listitem>
<para>RCC_FLAG_HSIRDY: HSI oscillator clock ready </para>
</listitem>
<listitem>
<para>RCC_FLAG_HSERDY: HSE oscillator clock ready </para>
</listitem>
<listitem>
<para>RCC_FLAG_PLLRDY: main PLL clock ready </para>
</listitem>
<listitem>
<para>RCC_FLAG_PLLI2SRDY: PLLI2S clock ready </para>
</listitem>
<listitem>
<para>RCC_FLAG_LSERDY: LSE oscillator clock ready </para>
</listitem>
<listitem>
<para>RCC_FLAG_LSIRDY: LSI oscillator clock ready </para>
</listitem>
<listitem>
<para>RCC_FLAG_BORRST: POR/PDR or BOR reset </para>
</listitem>
<listitem>
<para>RCC_FLAG_PINRST: Pin reset </para>
</listitem>
<listitem>
<para>RCC_FLAG_PORRST: POR/PDR reset </para>
</listitem>
<listitem>
<para>RCC_FLAG_SFTRST: Software reset </para>
</listitem>
<listitem>
<para>RCC_FLAG_IWDGRST: Independent Watchdog reset </para>
</listitem>
<listitem>
<para>RCC_FLAG_WWDGRST: Window Watchdog reset </para>
</listitem>
<listitem>
<para>RCC_FLAG_LPWRRST: Low Power reset </para>
</listitem>
</itemizedlist>
</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>The</entry><entry>
<para>new state of RCC_FLAG (SET or RESET). </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1ga6126c99f398ee4be410ad76ae3aee18f"/><section>
    <title>RCC_GetITStatus()</title>
<indexterm><primary>RCC_GetITStatus</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_GetITStatus</secondary></indexterm>
<para><computeroutput>ITStatus RCC_GetITStatus (uint8_t RCC_IT)</computeroutput></para><para>

<para>Checks whether the specified RCC interrupt has occurred or not. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>RCC_IT</entry><entry>
<para>specifies the RCC interrupt source to check. This parameter can be one of the following values: <itemizedlist>
<listitem>
<para>RCC_IT_LSIRDY: LSI ready interrupt </para>
</listitem>
<listitem>
<para>RCC_IT_LSERDY: LSE ready interrupt </para>
</listitem>
<listitem>
<para>RCC_IT_HSIRDY: HSI ready interrupt </para>
</listitem>
<listitem>
<para>RCC_IT_HSERDY: HSE ready interrupt </para>
</listitem>
<listitem>
<para>RCC_IT_PLLRDY: main PLL ready interrupt </para>
</listitem>
<listitem>
<para>RCC_IT_PLLI2SRDY: PLLI2S ready interrupt <?linebreak?> </para>
</listitem>
<listitem>
<para>RCC_IT_CSS: Clock Security System interrupt </para>
</listitem>
</itemizedlist>
</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>The</entry><entry>
<para>new state of RCC_IT (SET or RESET). </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1gaaeb32311c208b2a980841c9c884a41ea"/><section>
    <title>RCC_GetSYSCLKSource()</title>
<indexterm><primary>RCC_GetSYSCLKSource</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_GetSYSCLKSource</secondary></indexterm>
<para><computeroutput>uint8_t RCC_GetSYSCLKSource (void )</computeroutput></para><para>

<para>Returns the clock source used as system clock. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>The</entry><entry>
<para>clock source used as system clock. The returned value can be one of the following:<itemizedlist>
<listitem>
<para>0x00: HSI used as system clock</para>
</listitem><listitem>
<para>0x04: HSE used as system clock</para>
</listitem><listitem>
<para>0x08: PLL used as system clock </para>
</listitem></itemizedlist>
</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1ga9d0aec72e236c6cdf3a3a82dfb525491"/><section>
    <title>RCC_HCLKConfig()</title>
<indexterm><primary>RCC_HCLKConfig</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_HCLKConfig</secondary></indexterm>
<para><computeroutput>void RCC_HCLKConfig (uint32_t RCC_SYSCLK)</computeroutput></para><para>

<para>Configures the AHB clock (HCLK). </para>
</para>

<para><note><title>Note</title>

<para>Depending on the device voltage range, the software has to set correctly these bits to ensure that HCLK not exceed the maximum allowed frequency (for more details refer to section above &quot;CPU, AHB and APB busses clocks configuration functions&quot;) </para>
</note>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>RCC_SYSCLK</entry><entry>
<para>defines the AHB clock divider. This clock is derived from the system clock (SYSCLK). This parameter can be one of the following values: <itemizedlist>
<listitem>
<para>RCC_SYSCLK_Div1: AHB clock = SYSCLK </para>
</listitem>
<listitem>
<para>RCC_SYSCLK_Div2: AHB clock = SYSCLK/2 </para>
</listitem>
<listitem>
<para>RCC_SYSCLK_Div4: AHB clock = SYSCLK/4 </para>
</listitem>
<listitem>
<para>RCC_SYSCLK_Div8: AHB clock = SYSCLK/8 </para>
</listitem>
<listitem>
<para>RCC_SYSCLK_Div16: AHB clock = SYSCLK/16 </para>
</listitem>
<listitem>
<para>RCC_SYSCLK_Div64: AHB clock = SYSCLK/64 </para>
</listitem>
<listitem>
<para>RCC_SYSCLK_Div128: AHB clock = SYSCLK/128 </para>
</listitem>
<listitem>
<para>RCC_SYSCLK_Div256: AHB clock = SYSCLK/256 </para>
</listitem>
<listitem>
<para>RCC_SYSCLK_Div512: AHB clock = SYSCLK/512 </para>
</listitem>
</itemizedlist>
</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1ga523b06e73f6aa8a03e42299c855066a8"/><section>
    <title>RCC_HSEConfig()</title>
<indexterm><primary>RCC_HSEConfig</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_HSEConfig</secondary></indexterm>
<para><computeroutput>void RCC_HSEConfig (uint8_t RCC_HSE)</computeroutput></para><para>

<para>Configures the External High Speed oscillator (HSE). </para>
</para>

<para><note><title>Note</title>

<para>After enabling the HSE (RCC_HSE_ON or RCC_HSE_Bypass), the application software should wait on HSERDY flag to be set indicating that HSE clock is stable and can be used to clock the PLL and/or system clock. </para>

<para>HSE state can not be changed if it is used directly or through the PLL as system clock. In this case, you have to select another source of the system clock then change the HSE state (ex. disable it). </para>

<para>The HSE is stopped by hardware when entering STOP and STANDBY modes. <?linebreak?> </para>

<para>This function reset the CSSON bit, so if the Clock security system(CSS) was previously enabled you have to enable it again after calling this function. <?linebreak?> </para>
</note>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>RCC_HSE</entry><entry>
<para>specifies the new state of the HSE. This parameter can be one of the following values: <itemizedlist>
<listitem>
<para>RCC_HSE_OFF: turn OFF the HSE oscillator, HSERDY flag goes low after 6 HSE oscillator clock cycles. </para>
</listitem>
<listitem>
<para>RCC_HSE_ON: turn ON the HSE oscillator </para>
</listitem>
<listitem>
<para>RCC_HSE_Bypass: HSE oscillator bypassed with external clock </para>
</listitem>
</itemizedlist>
</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1ga0c6772a1e43765909495f57815ef69e2"/><section>
    <title>RCC_HSICmd()</title>
<indexterm><primary>RCC_HSICmd</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_HSICmd</secondary></indexterm>
<para><computeroutput>void RCC_HSICmd (FunctionalState NewState)</computeroutput></para><para>

<para>Enables or disables the Internal High Speed oscillator (HSI). </para>
</para>

<para><note><title>Note</title>

<para>The HSI is stopped by hardware when entering STOP and STANDBY modes. It is used (enabled by hardware) as system clock source after startup from Reset, wakeup from STOP and STANDBY mode, or in case of failure of the HSE used directly or indirectly as system clock (if the Clock Security System CSS is enabled). <?linebreak?> </para>

<para>HSI can not be stopped if it is used as system clock source. In this case, you have to select another source of the system clock then stop the HSI. <?linebreak?> </para>

<para>After enabling the HSI, the application software should wait on HSIRDY flag to be set indicating that HSI clock is stable and can be used as system clock source. <?linebreak?> </para>
</note>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>NewState</entry><entry>
<para>new state of the HSI. This parameter can be: ENABLE or DISABLE. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <note><title>Note</title>

<para>When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator clock cycles. <?linebreak?> </para>
</note>

                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1ga6c56f8529988fcc8f4dbffbc1bab27d0"/><section>
    <title>RCC_I2SCLKConfig()</title>
<indexterm><primary>RCC_I2SCLKConfig</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_I2SCLKConfig</secondary></indexterm>
<para><computeroutput>void RCC_I2SCLKConfig (uint32_t RCC_I2SCLKSource)</computeroutput></para><para>

<para>Configures the I2S clock source (I2SCLK). </para>
</para>

<para><note><title>Note</title>

<para>This function must be called before enabling the I2S APB clock. </para>
</note>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>RCC_I2SCLKSource</entry><entry>
<para>specifies the I2S clock source. This parameter can be one of the following values: <itemizedlist>
<listitem>
<para>RCC_I2S2CLKSource_PLLI2S: PLLI2S clock used as I2S clock source </para>
</listitem>
<listitem>
<para>RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin used as I2S clock source </para>
</listitem>
</itemizedlist>
</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1gaa953aa226e9ce45300d535941e4dfe2f"/><section>
    <title>RCC_ITConfig()</title>
<indexterm><primary>RCC_ITConfig</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_ITConfig</secondary></indexterm>
<para><computeroutput>void RCC_ITConfig (uint8_t RCC_IT, FunctionalState NewState)</computeroutput></para><para>

<para>Enables or disables the specified RCC interrupts. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>RCC_IT</entry><entry>
<para>specifies the RCC interrupt sources to be enabled or disabled. This parameter can be any combination of the following values: <itemizedlist>
<listitem>
<para>RCC_IT_LSIRDY: LSI ready interrupt </para>
</listitem>
<listitem>
<para>RCC_IT_LSERDY: LSE ready interrupt </para>
</listitem>
<listitem>
<para>RCC_IT_HSIRDY: HSI ready interrupt </para>
</listitem>
<listitem>
<para>RCC_IT_HSERDY: HSE ready interrupt </para>
</listitem>
<listitem>
<para>RCC_IT_PLLRDY: main PLL ready interrupt </para>
</listitem>
<listitem>
<para>RCC_IT_PLLI2SRDY: PLLI2S ready interrupt <?linebreak?> </para>
</listitem>
</itemizedlist>
</para>
</entry>
                            </row>
                            <row>
<entry>NewState</entry><entry>
<para>new state of the specified RCC interrupts. This parameter can be: ENABLE or DISABLE. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1ga65209ab5c3589b249c7d70f978735ca6"/><section>
    <title>RCC_LSEConfig()</title>
<indexterm><primary>RCC_LSEConfig</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_LSEConfig</secondary></indexterm>
<para><computeroutput>void RCC_LSEConfig (uint8_t RCC_LSE)</computeroutput></para><para>

<para>Configures the External Low Speed oscillator (LSE). </para>
</para>

<para><note><title>Note</title>

<para>As the LSE is in the Backup domain and write access is denied to this domain after reset, you have to enable write access using PWR_BackupAccessCmd(ENABLE) function before to configure the LSE (to be done once after reset). <?linebreak?> </para>

<para>After enabling the LSE (RCC_LSE_ON or RCC_LSE_Bypass), the application software should wait on LSERDY flag to be set indicating that LSE clock is stable and can be used to clock the RTC. </para>
</note>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>RCC_LSE</entry><entry>
<para>specifies the new state of the LSE. This parameter can be one of the following values: <itemizedlist>
<listitem>
<para>RCC_LSE_OFF: turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles. </para>
</listitem>
<listitem>
<para>RCC_LSE_ON: turn ON the LSE oscillator </para>
</listitem>
<listitem>
<para>RCC_LSE_Bypass: LSE oscillator bypassed with external clock </para>
</listitem>
</itemizedlist>
</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1ga81e3ca29fd154ac2019bba6936d6d5ed"/><section>
    <title>RCC_LSICmd()</title>
<indexterm><primary>RCC_LSICmd</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_LSICmd</secondary></indexterm>
<para><computeroutput>void RCC_LSICmd (FunctionalState NewState)</computeroutput></para><para>

<para>Enables or disables the Internal Low Speed oscillator (LSI). </para>
</para>

<para><note><title>Note</title>

<para>After enabling the LSI, the application software should wait on LSIRDY flag to be set indicating that LSI clock is stable and can be used to clock the IWDG and/or the RTC. </para>

<para>LSI can not be disabled if the IWDG is running. <?linebreak?> </para>
</note>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>NewState</entry><entry>
<para>new state of the LSI. This parameter can be: ENABLE or DISABLE. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <note><title>Note</title>

<para>When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator clock cycles. </para>
</note>

                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1ga15c9ecb6ef015ed008cb28e5b7a50531"/><section>
    <title>RCC_MCO1Config()</title>
<indexterm><primary>RCC_MCO1Config</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_MCO1Config</secondary></indexterm>
<para><computeroutput>void RCC_MCO1Config (uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)</computeroutput></para><para>

<para>Selects the clock source to output on MCO1 pin(PA8). </para>
</para>

<para><note><title>Note</title>

<para>PA8 should be configured in alternate function mode. </para>
</note>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>RCC_MCO1Source</entry><entry>
<para>specifies the clock source to output. This parameter can be one of the following values: <itemizedlist>
<listitem>
<para>RCC_MCO1Source_HSI: HSI clock selected as MCO1 source </para>
</listitem>
<listitem>
<para>RCC_MCO1Source_LSE: LSE clock selected as MCO1 source </para>
</listitem>
<listitem>
<para>RCC_MCO1Source_HSE: HSE clock selected as MCO1 source </para>
</listitem>
<listitem>
<para>RCC_MCO1Source_PLLCLK: main PLL clock selected as MCO1 source </para>
</listitem>
</itemizedlist>
</para>
</entry>
                            </row>
                            <row>
<entry>RCC_MCO1Div</entry><entry>
<para>specifies the MCO1 prescaler. This parameter can be one of the following values: <itemizedlist>
<listitem>
<para>RCC_MCO1Div_1: no division applied to MCO1 clock </para>
</listitem>
<listitem>
<para>RCC_MCO1Div_2: division by 2 applied to MCO1 clock </para>
</listitem>
<listitem>
<para>RCC_MCO1Div_3: division by 3 applied to MCO1 clock </para>
</listitem>
<listitem>
<para>RCC_MCO1Div_4: division by 4 applied to MCO1 clock </para>
</listitem>
<listitem>
<para>RCC_MCO1Div_5: division by 5 applied to MCO1 clock </para>
</listitem>
</itemizedlist>
</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1gaf50f10675b747de60c739e44e5c22aee"/><section>
    <title>RCC_MCO2Config()</title>
<indexterm><primary>RCC_MCO2Config</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_MCO2Config</secondary></indexterm>
<para><computeroutput>void RCC_MCO2Config (uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)</computeroutput></para><para>

<para>Selects the clock source to output on MCO2 pin(PC9). </para>
</para>

<para><note><title>Note</title>

<para>PC9 should be configured in alternate function mode. </para>
</note>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>RCC_MCO2Source</entry><entry>
<para>specifies the clock source to output. This parameter can be one of the following values: <itemizedlist>
<listitem>
<para>RCC_MCO2Source_SYSCLK: System clock (SYSCLK) selected as MCO2 source </para>
</listitem>
<listitem>
<para>RCC_MCO2Source_PLLI2SCLK: PLLI2S clock selected as MCO2 source </para>
</listitem>
<listitem>
<para>RCC_MCO2Source_HSE: HSE clock selected as MCO2 source </para>
</listitem>
<listitem>
<para>RCC_MCO2Source_PLLCLK: main PLL clock selected as MCO2 source </para>
</listitem>
</itemizedlist>
</para>
</entry>
                            </row>
                            <row>
<entry>RCC_MCO2Div</entry><entry>
<para>specifies the MCO2 prescaler. This parameter can be one of the following values: <itemizedlist>
<listitem>
<para>RCC_MCO2Div_1: no division applied to MCO2 clock </para>
</listitem>
<listitem>
<para>RCC_MCO2Div_2: division by 2 applied to MCO2 clock </para>
</listitem>
<listitem>
<para>RCC_MCO2Div_3: division by 3 applied to MCO2 clock </para>
</listitem>
<listitem>
<para>RCC_MCO2Div_4: division by 4 applied to MCO2 clock </para>
</listitem>
<listitem>
<para>RCC_MCO2Div_5: division by 5 applied to MCO2 clock </para>
</listitem>
</itemizedlist>
</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1ga448137346d4292985d4e7a61dd1a824f"/><section>
    <title>RCC_PCLK1Config()</title>
<indexterm><primary>RCC_PCLK1Config</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_PCLK1Config</secondary></indexterm>
<para><computeroutput>void RCC_PCLK1Config (uint32_t RCC_HCLK)</computeroutput></para><para>

<para>Configures the Low Speed APB clock (PCLK1). </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>RCC_HCLK</entry><entry>
<para>defines the APB1 clock divider. This clock is derived from the AHB clock (HCLK). This parameter can be one of the following values: <itemizedlist>
<listitem>
<para>RCC_HCLK_Div1: APB1 clock = HCLK </para>
</listitem>
<listitem>
<para>RCC_HCLK_Div2: APB1 clock = HCLK/2 </para>
</listitem>
<listitem>
<para>RCC_HCLK_Div4: APB1 clock = HCLK/4 </para>
</listitem>
<listitem>
<para>RCC_HCLK_Div8: APB1 clock = HCLK/8 </para>
</listitem>
<listitem>
<para>RCC_HCLK_Div16: APB1 clock = HCLK/16 </para>
</listitem>
</itemizedlist>
</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1ga09f9c010a4adca9e036da42c2ca6126a"/><section>
    <title>RCC_PCLK2Config()</title>
<indexterm><primary>RCC_PCLK2Config</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_PCLK2Config</secondary></indexterm>
<para><computeroutput>void RCC_PCLK2Config (uint32_t RCC_HCLK)</computeroutput></para><para>

<para>Configures the High Speed APB clock (PCLK2). </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>RCC_HCLK</entry><entry>
<para>defines the APB2 clock divider. This clock is derived from the AHB clock (HCLK). This parameter can be one of the following values: <itemizedlist>
<listitem>
<para>RCC_HCLK_Div1: APB2 clock = HCLK </para>
</listitem>
<listitem>
<para>RCC_HCLK_Div2: APB2 clock = HCLK/2 </para>
</listitem>
<listitem>
<para>RCC_HCLK_Div4: APB2 clock = HCLK/4 </para>
</listitem>
<listitem>
<para>RCC_HCLK_Div8: APB2 clock = HCLK/8 </para>
</listitem>
<listitem>
<para>RCC_HCLK_Div16: APB2 clock = HCLK/16 </para>
</listitem>
</itemizedlist>
</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1ga84dee53c75e58fdb53571716593c2272"/><section>
    <title>RCC_PLLCmd()</title>
<indexterm><primary>RCC_PLLCmd</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_PLLCmd</secondary></indexterm>
<para><computeroutput>void RCC_PLLCmd (FunctionalState NewState)</computeroutput></para><para>

<para>Enables or disables the main PLL. </para>
</para>

<para><note><title>Note</title>

<para>After enabling the main PLL, the application software should wait on PLLRDY flag to be set indicating that PLL clock is stable and can be used as system clock source. </para>

<para>The main PLL can not be disabled if it is used as system clock source </para>

<para>The main PLL is disabled by hardware when entering STOP and STANDBY modes. </para>
</note>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>NewState</entry><entry>
<para>new state of the main PLL. This parameter can be: ENABLE or DISABLE. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1ga154b93e90bfdede2a874244a1ff1002e"/><section>
    <title>RCC_PLLConfig()</title>
<indexterm><primary>RCC_PLLConfig</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_PLLConfig</secondary></indexterm>
<para><computeroutput>void RCC_PLLConfig (uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)</computeroutput></para><para>

<para>Configures the main PLL clock source, multiplication and division factors. </para>
</para>

<para><note><title>Note</title>

<para>This function must be used only when the main PLL is disabled.</para>
</note>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>RCC_PLLSource</entry><entry>
<para>specifies the PLL entry clock source. This parameter can be one of the following values: <itemizedlist>
<listitem>
<para>RCC_PLLSource_HSI: HSI oscillator clock selected as PLL clock entry </para>
</listitem>
<listitem>
<para>RCC_PLLSource_HSE: HSE oscillator clock selected as PLL clock entry </para>
</listitem>
</itemizedlist>
</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <note><title>Note</title>

<para>This clock source (RCC_PLLSource) is common for the main PLL and PLLI2S. <?linebreak?></para>
</note>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>PLLM</entry><entry>
<para>specifies the division factor for PLL VCO input clock This parameter must be a number between 0 and 63. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <note><title>Note</title>

<para>You have to set the PLLM parameter correctly to ensure that the VCO input frequency ranges from 1 to 2 MHz. It is recommended to select a frequency of 2 MHz to limit PLL jitter.</para>
</note>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>PLLN</entry><entry>
<para>specifies the multiplication factor for PLL VCO output clock This parameter must be a number between 192 and 432. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <note><title>Note</title>

<para>You have to set the PLLN parameter correctly to ensure that the VCO output frequency is between 192 and 432 MHz.</para>
</note>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>PLLP</entry><entry>
<para>specifies the division factor for main system clock (SYSCLK) This parameter must be a number in the range {2, 4, 6, or 8}. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <note><title>Note</title>

<para>You have to set the PLLP parameter correctly to not exceed 168 MHz on the System clock frequency.</para>
</note>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>PLLQ</entry><entry>
<para>specifies the division factor for OTG FS, SDIO and RNG clocks This parameter must be a number between 4 and 15. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <note><title>Note</title>

<para>If the USB OTG FS is used in your application, you have to set the PLLQ parameter correctly to have 48 MHz clock for the USB. However, the SDIO and RNG need a frequency lower than or equal to 48 MHz to work correctly.</para>
</note>

                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1ga2efe493a6337d5e0034bfcdfb0f541e4"/><section>
    <title>RCC_PLLI2SCmd()</title>
<indexterm><primary>RCC_PLLI2SCmd</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_PLLI2SCmd</secondary></indexterm>
<para><computeroutput>void RCC_PLLI2SCmd (FunctionalState NewState)</computeroutput></para><para>

<para>Enables or disables the PLLI2S. </para>
</para>

<para><note><title>Note</title>

<para>The PLLI2S is disabled by hardware when entering STOP and STANDBY modes. <?linebreak?> </para>
</note>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>NewState</entry><entry>
<para>new state of the PLLI2S. This parameter can be: ENABLE or DISABLE. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1ga4c15157382939a693c15620a4867e6ad"/><section>
    <title>RCC_PLLI2SConfig()</title>
<indexterm><primary>RCC_PLLI2SConfig</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_PLLI2SConfig</secondary></indexterm>
<para><computeroutput>void RCC_PLLI2SConfig (uint32_t PLLI2SN, uint32_t PLLI2SR)</computeroutput></para><para>

<para>Configures the PLLI2S clock multiplication and division factors. </para>
</para>

<para><note><title>Note</title>

<para>This function must be used only when the PLLI2S is disabled. </para>

<para>PLLI2S clock source is common with the main PLL (configured in RCC_PLLConfig function ) <?linebreak?></para>
</note>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>PLLI2SN</entry><entry>
<para>specifies the multiplication factor for PLLI2S VCO output clock This parameter must be a number between 192 and 432. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <note><title>Note</title>

<para>You have to set the PLLI2SN parameter correctly to ensure that the VCO output frequency is between 192 and 432 MHz.</para>
</note>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>PLLI2SR</entry><entry>
<para>specifies the division factor for I2S clock This parameter must be a number between 2 and 7. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <note><title>Note</title>

<para>You have to set the PLLI2SR parameter correctly to not exceed 192 MHz on the I2S clock frequency.</para>
</note>

                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1ga9802f84846df2cea8e369234ed13b159"/><section>
    <title>RCC_RTCCLKCmd()</title>
<indexterm><primary>RCC_RTCCLKCmd</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_RTCCLKCmd</secondary></indexterm>
<para><computeroutput>void RCC_RTCCLKCmd (FunctionalState NewState)</computeroutput></para><para>

<para>Enables or disables the RTC clock. </para>
</para>

<para><note><title>Note</title>

<para>This function must be used only after the RTC clock source was selected using the RCC_RTCCLKConfig function. </para>
</note>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>NewState</entry><entry>
<para>new state of the RTC clock. This parameter can be: ENABLE or DISABLE. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1ga1473d8a5a020642966359611c44181b0"/><section>
    <title>RCC_RTCCLKConfig()</title>
<indexterm><primary>RCC_RTCCLKConfig</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_RTCCLKConfig</secondary></indexterm>
<para><computeroutput>void RCC_RTCCLKConfig (uint32_t RCC_RTCCLKSource)</computeroutput></para><para>

<para>Configures the RTC clock (RTCCLK). </para>
</para>

<para><note><title>Note</title>

<para>As the RTC clock configuration bits are in the Backup domain and write access is denied to this domain after reset, you have to enable write access using PWR_BackupAccessCmd(ENABLE) function before to configure the RTC clock source (to be done once after reset). <?linebreak?> </para>

<para>Once the RTC clock is configured it can&apos;t be changed unless the <?linebreak?> Backup domain is reset using <link linkend="_group___r_c_c___group3_1ga636c3b72f35391e67f12a551b15fa54a">RCC_BackupResetCmd()</link> function, or by a Power On Reset (POR).</para>
</note>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>RCC_RTCCLKSource</entry><entry>
<para>specifies the RTC clock source. This parameter can be one of the following values: <itemizedlist>
<listitem>
<para>RCC_RTCCLKSource_LSE: LSE selected as RTC clock </para>
</listitem>
<listitem>
<para>RCC_RTCCLKSource_LSI: LSI selected as RTC clock </para>
</listitem>
<listitem>
<para>RCC_RTCCLKSource_HSE_Divx: HSE clock divided by x selected as RTC clock, where x:[2,31]</para>
</listitem>
</itemizedlist>
</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <note><title>Note</title>

<para>If the LSE or LSI is used as RTC clock source, the RTC continues to work in STOP and STANDBY modes, and can be used as wakeup source. However, when the HSE clock is used as RTC clock source, the RTC cannot be used in STOP and STANDBY modes. <?linebreak?> </para>

<para>The maximum input clock frequency for RTC is 1MHz (when using HSE as RTC clock source).</para>
</note>

                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1ga3551a36a8f0a3dc96a74d6b939048337"/><section>
    <title>RCC_SYSCLKConfig()</title>
<indexterm><primary>RCC_SYSCLKConfig</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_SYSCLKConfig</secondary></indexterm>
<para><computeroutput>void RCC_SYSCLKConfig (uint32_t RCC_SYSCLKSource)</computeroutput></para><para>

<para>Configures the system clock (SYSCLK). </para>
</para>

<para><note><title>Note</title>

<para>The HSI is used (enabled by hardware) as system clock source after startup from Reset, wake-up from STOP and STANDBY mode, or in case of failure of the HSE used directly or indirectly as system clock (if the Clock Security System CSS is enabled). </para>

<para>A switch from one clock source to another occurs only if the target clock source is ready (clock stable after startup delay or PLL locked). If a clock source which is not yet ready is selected, the switch will occur when the clock source will be ready. You can use <link linkend="_group___r_c_c___group2_1gaaeb32311c208b2a980841c9c884a41ea">RCC_GetSYSCLKSource()</link> function to know which clock is currently used as system clock source. </para>
</note>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>RCC_SYSCLKSource</entry><entry>
<para>specifies the clock source used as system clock. This parameter can be one of the following values: <itemizedlist>
<listitem>
<para>RCC_SYSCLKSource_HSI: HSI selected as system clock source </para>
</listitem>
<listitem>
<para>RCC_SYSCLKSource_HSE: HSE selected as system clock source </para>
</listitem>
<listitem>
<para>RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source </para>
</listitem>
</itemizedlist>
</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_c_c_1gae0f15692614dd048ee4110a056f001dc"/><section>
    <title>RCC_WaitForHSEStartUp()</title>
<indexterm><primary>RCC_WaitForHSEStartUp</primary><secondary>RCC</secondary></indexterm>
<indexterm><primary>RCC</primary><secondary>RCC_WaitForHSEStartUp</secondary></indexterm>
<para><computeroutput>ErrorStatus RCC_WaitForHSEStartUp (void )</computeroutput></para><para>

<para>Waits for HSE start-up. </para>
</para>

<para><note><title>Note</title>

<para>This functions waits on HSERDY flag to be set and return SUCCESS if this flag is set, otherwise returns ERROR if the timeout is reached and this flag is not set. The timeout value is defined by the constant HSE_STARTUP_TIMEOUT in <link linkend="_stm32f4xx_8h">stm32f4xx.h</link> file. You can tailor it depending on the HSE crystal used in your application. </para>
</note>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>None</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>An</entry><entry>
<para>ErrorStatus enumeration value:<itemizedlist>
<listitem>
<para>SUCCESS: HSE oscillator is stable and ready to use</para>
</listitem><listitem>
<para>ERROR: HSE oscillator not yet ready </para>
</listitem></itemizedlist>
</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
</section>
</section>
