<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_core__cm_instr_8h_source" xml:lang="en-US">
<title>core_cmInstr.h</title>
<indexterm><primary>CUBE_IDE/VGA/Core/Inc/core_cmInstr.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">/**************************************************************************/</emphasis>
24 <emphasis role="preprocessor">#ifndef&#32;__CORE_CMINSTR_H</emphasis>
25 <emphasis role="preprocessor">#define&#32;__CORE_CMINSTR_H</emphasis>
26 
27 
28 <emphasis role="comment">/*&#32;##########################&#32;&#32;Core&#32;Instruction&#32;Access&#32;&#32;#########################&#32;*/</emphasis>
34 <emphasis role="preprocessor">#if&#32;&#32;&#32;defined&#32;(&#32;__CC_ARM&#32;)&#32;</emphasis><emphasis role="comment">/*------------------RealView&#32;Compiler&#32;-----------------*/</emphasis><emphasis role="preprocessor"></emphasis>
35 <emphasis role="comment">/*&#32;ARM&#32;armcc&#32;specific&#32;functions&#32;*/</emphasis>
36 
37 <emphasis role="preprocessor">#if&#32;(__ARMCC_VERSION&#32;&lt;&#32;400677)</emphasis>
38 <emphasis role="preprocessor">&#32;&#32;#error&#32;&quot;Please&#32;use&#32;ARM&#32;Compiler&#32;Toolchain&#32;V4.0.677&#32;or&#32;later!&quot;</emphasis>
39 <emphasis role="preprocessor">#endif</emphasis>
40 
41 
46 <emphasis role="preprocessor">#define&#32;__NOP&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__nop</emphasis>
47 
48 
54 <emphasis role="preprocessor">#define&#32;__WFI&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__wfi</emphasis>
55 
56 
62 <emphasis role="preprocessor">#define&#32;__WFE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__wfe</emphasis>
63 
64 
69 <emphasis role="preprocessor">#define&#32;__SEV&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sev</emphasis>
70 
71 
78 <emphasis role="preprocessor">#define&#32;__ISB()&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__isb(0xF)</emphasis>
79 
80 
86 <emphasis role="preprocessor">#define&#32;__DSB()&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__dsb(0xF)</emphasis>
87 
88 
94 <emphasis role="preprocessor">#define&#32;__DMB()&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__dmb(0xF)</emphasis>
95 
96 
104 <emphasis role="preprocessor">#define&#32;__REV&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__rev</emphasis>
105 
106 
114 <emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;__ASM&#32;uint32_t&#32;__REV16(uint32_t&#32;value)
115 {
116 &#32;&#32;rev16&#32;r0,&#32;r0
117 &#32;&#32;bx&#32;lr
118 }
119 
120 
128 <emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;__ASM&#32;int32_t&#32;__REVSH(int32_t&#32;value)
129 {
130 &#32;&#32;revsh&#32;r0,&#32;r0
131 &#32;&#32;bx&#32;lr
132 }
133 
134 
135 <emphasis role="preprocessor">#if&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__CORTEX_M&#32;&gt;=&#32;0x03)</emphasis>
136 
144 <emphasis role="preprocessor">#define&#32;__RBIT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__rbit</emphasis>
145 
146 
154 <emphasis role="preprocessor">#define&#32;__LDREXB(ptr)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((uint8_t&#32;)&#32;__ldrex(ptr))</emphasis>
155 
156 
164 <emphasis role="preprocessor">#define&#32;__LDREXH(ptr)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((uint16_t)&#32;__ldrex(ptr))</emphasis>
165 
166 
174 <emphasis role="preprocessor">#define&#32;__LDREXW(ptr)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((uint32_t&#32;)&#32;__ldrex(ptr))</emphasis>
175 
176 
186 <emphasis role="preprocessor">#define&#32;__STREXB(value,&#32;ptr)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__strex(value,&#32;ptr)</emphasis>
187 
188 
198 <emphasis role="preprocessor">#define&#32;__STREXH(value,&#32;ptr)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__strex(value,&#32;ptr)</emphasis>
199 
200 
210 <emphasis role="preprocessor">#define&#32;__STREXW(value,&#32;ptr)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__strex(value,&#32;ptr)</emphasis>
211 
212 
218 <emphasis role="preprocessor">#define&#32;__CLREX&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__clrex</emphasis>
219 
220 
229 <emphasis role="preprocessor">#define&#32;__SSAT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ssat</emphasis>
230 
231 
240 <emphasis role="preprocessor">#define&#32;__USAT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__usat</emphasis>
241 
242 
250 <emphasis role="preprocessor">#define&#32;__CLZ&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__clz&#32;</emphasis>
251 
252 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;(__CORTEX_M&#32;&gt;=&#32;0x03)&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
253 
254 
255 
256 <emphasis role="preprocessor">#elif&#32;defined&#32;(&#32;__ICCARM__&#32;)&#32;</emphasis><emphasis role="comment">/*------------------&#32;ICC&#32;Compiler&#32;-------------------*/</emphasis><emphasis role="preprocessor"></emphasis>
257 <emphasis role="comment">/*&#32;IAR&#32;iccarm&#32;specific&#32;functions&#32;*/</emphasis>
258 
259 <emphasis role="preprocessor">#include&#32;&lt;cmsis_iar.h&gt;</emphasis>
260 
261 
262 <emphasis role="preprocessor">#elif&#32;defined&#32;(&#32;__GNUC__&#32;)&#32;</emphasis><emphasis role="comment">/*------------------&#32;GNU&#32;Compiler&#32;---------------------*/</emphasis><emphasis role="preprocessor"></emphasis>
263 <emphasis role="comment">/*&#32;GNU&#32;gcc&#32;specific&#32;functions&#32;*/</emphasis>
264 
269 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__NOP(<emphasis role="keywordtype">void</emphasis>)
270 {
271 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;nop&quot;</emphasis>);
272 }
273 
274 
280 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__WFI(<emphasis role="keywordtype">void</emphasis>)
281 {
282 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;wfi&quot;</emphasis>);
283 }
284 
285 
291 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__WFE(<emphasis role="keywordtype">void</emphasis>)
292 {
293 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;wfe&quot;</emphasis>);
294 }
295 
296 
301 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__SEV(<emphasis role="keywordtype">void</emphasis>)
302 {
303 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;sev&quot;</emphasis>);
304 }
305 
306 
313 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__ISB(<emphasis role="keywordtype">void</emphasis>)
314 {
315 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;isb&quot;</emphasis>);
316 }
317 
318 
324 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__DSB(<emphasis role="keywordtype">void</emphasis>)
325 {
326 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;dsb&quot;</emphasis>);
327 }
328 
329 
335 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__DMB(<emphasis role="keywordtype">void</emphasis>)
336 {
337 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;dmb&quot;</emphasis>);
338 }
339 
340 
348 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__REV(uint32_t&#32;value)
349 {
350 &#32;&#32;uint32_t&#32;result;
351 &#32;&#32;
352 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;rev&#32;%0,&#32;%1&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(value)&#32;);
353 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
354 }
355 
356 
364 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__REV16(uint32_t&#32;value)
365 {
366 &#32;&#32;uint32_t&#32;result;
367 &#32;&#32;
368 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;rev16&#32;%0,&#32;%1&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(value)&#32;);
369 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
370 }
371 
372 
380 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;int32_t&#32;__REVSH(int32_t&#32;value)
381 {
382 &#32;&#32;uint32_t&#32;result;
383 &#32;&#32;
384 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;revsh&#32;%0,&#32;%1&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(value)&#32;);
385 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
386 }
387 
388 
389 <emphasis role="preprocessor">#if&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__CORTEX_M&#32;&gt;=&#32;0x03)</emphasis>
390 
398 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__RBIT(uint32_t&#32;value)
399 {
400 &#32;&#32;uint32_t&#32;result;
401 &#32;&#32;
402 &#32;&#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;rbit&#32;%0,&#32;%1&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(value)&#32;);
403 &#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
404 }
405 
406 
414 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint8_t&#32;__LDREXB(<emphasis role="keyword">volatile</emphasis>&#32;uint8_t&#32;*addr)
415 {
416 &#32;&#32;&#32;&#32;uint8_t&#32;result;
417 &#32;&#32;
418 &#32;&#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;ldrexb&#32;%0,&#32;[%1]&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(addr)&#32;);
419 &#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
420 }
421 
422 
430 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint16_t&#32;__LDREXH(<emphasis role="keyword">volatile</emphasis>&#32;uint16_t&#32;*addr)
431 {
432 &#32;&#32;&#32;&#32;uint16_t&#32;result;
433 &#32;&#32;
434 &#32;&#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;ldrexh&#32;%0,&#32;[%1]&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(addr)&#32;);
435 &#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
436 }
437 
438 
446 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__LDREXW(<emphasis role="keyword">volatile</emphasis>&#32;uint32_t&#32;*addr)
447 {
448 &#32;&#32;&#32;&#32;uint32_t&#32;result;
449 &#32;&#32;
450 &#32;&#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;ldrex&#32;%0,&#32;[%1]&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(addr)&#32;);
451 &#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
452 }
453 
454 
464 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__STREXB(uint8_t&#32;value,&#32;<emphasis role="keyword">volatile</emphasis>&#32;uint8_t&#32;*addr)
465 {
466 &#32;&#32;&#32;uint32_t&#32;result;
467 &#32;&#32;
468 &#32;&#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;strexb&#32;%0,&#32;%2,&#32;[%1]&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(addr),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(value)&#32;);
469 &#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
470 }
471 
472 
482 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__STREXH(uint16_t&#32;value,&#32;<emphasis role="keyword">volatile</emphasis>&#32;uint16_t&#32;*addr)
483 {
484 &#32;&#32;&#32;uint32_t&#32;result;
485 &#32;&#32;
486 &#32;&#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;strexh&#32;%0,&#32;%2,&#32;[%1]&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(addr),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(value)&#32;);
487 &#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
488 }
489 
490 
500 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__STREXW(uint32_t&#32;value,&#32;<emphasis role="keyword">volatile</emphasis>&#32;uint32_t&#32;*addr)
501 {
502 &#32;&#32;&#32;uint32_t&#32;result;
503 &#32;&#32;
504 &#32;&#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;strex&#32;%0,&#32;%2,&#32;[%1]&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(addr),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(value)&#32;);
505 &#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
506 }
507 
508 
514 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__CLREX(<emphasis role="keywordtype">void</emphasis>)
515 {
516 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;clrex&quot;</emphasis>);
517 }
518 
519 
528 <emphasis role="preprocessor">#define&#32;__SSAT(ARG1,ARG2)&#32;\</emphasis>
529 <emphasis role="preprocessor">({&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
530 <emphasis role="preprocessor">&#32;&#32;uint32_t&#32;__RES,&#32;__ARG1&#32;=&#32;(ARG1);&#32;\</emphasis>
531 <emphasis role="preprocessor">&#32;&#32;__ASM&#32;(&quot;ssat&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;&quot;=r&quot;&#32;(__RES)&#32;:&#32;&#32;&quot;I&quot;&#32;(ARG2),&#32;&quot;r&quot;&#32;(__ARG1)&#32;);&#32;\
532 &#32;&#32;__RES;&#32;\
533 &#32;})
534 
535 
544 <emphasis role="preprocessor">#define&#32;__USAT(ARG1,ARG2)&#32;\</emphasis>
545 <emphasis role="preprocessor">({&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
546 <emphasis role="preprocessor">&#32;&#32;uint32_t&#32;__RES,&#32;__ARG1&#32;=&#32;(ARG1);&#32;\</emphasis>
547 <emphasis role="preprocessor">&#32;&#32;__ASM&#32;(&quot;usat&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;&quot;=r&quot;&#32;(__RES)&#32;:&#32;&#32;&quot;I&quot;&#32;(ARG2),&#32;&quot;r&quot;&#32;(__ARG1)&#32;);&#32;\
548 &#32;&#32;__RES;&#32;\
549 &#32;})
550 
551 
559 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint8_t&#32;__CLZ(uint32_t&#32;value)
560 {
561 &#32;&#32;uint8_t&#32;result;
562 &#32;&#32;
563 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;clz&#32;%0,&#32;%1&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(value)&#32;);
564 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
565 }
566 
567 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;(__CORTEX_M&#32;&gt;=&#32;0x03)&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
568 
569 
570 
571 
572 <emphasis role="preprocessor">#elif&#32;defined&#32;(&#32;__TASKING__&#32;)&#32;</emphasis><emphasis role="comment">/*------------------&#32;TASKING&#32;Compiler&#32;--------------*/</emphasis><emphasis role="preprocessor"></emphasis>
573 <emphasis role="comment">/*&#32;TASKING&#32;carm&#32;specific&#32;functions&#32;*/</emphasis>
574 
575 <emphasis role="comment">/*</emphasis>
576 <emphasis role="comment">&#32;*&#32;The&#32;CMSIS&#32;functions&#32;have&#32;been&#32;implemented&#32;as&#32;intrinsics&#32;in&#32;the&#32;compiler.</emphasis>
577 <emphasis role="comment">&#32;*&#32;Please&#32;use&#32;&quot;carm&#32;-?i&quot;&#32;to&#32;get&#32;an&#32;up&#32;to&#32;date&#32;list&#32;of&#32;all&#32;intrinsics,</emphasis>
578 <emphasis role="comment">&#32;*&#32;Including&#32;the&#32;CMSIS&#32;ones.</emphasis>
579 <emphasis role="comment">&#32;*/</emphasis>
580 
581 <emphasis role="preprocessor">#endif</emphasis>
582 &#32;<emphasis role="comment">/*&#32;end&#32;of&#32;group&#32;CMSIS_Core_InstructionInterface&#32;*/</emphasis>
584 
585 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;__CORE_CMINSTR_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
