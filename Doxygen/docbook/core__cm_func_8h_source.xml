<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_core__cm_func_8h_source" xml:lang="en-US">
<title>core_cmFunc.h</title>
<indexterm><primary>CUBE_IDE/VGA/Core/Inc/core_cmFunc.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">/**************************************************************************/</emphasis>
24 <emphasis role="preprocessor">#ifndef&#32;__CORE_CMFUNC_H</emphasis>
25 <emphasis role="preprocessor">#define&#32;__CORE_CMFUNC_H</emphasis>
26 
27 
28 <emphasis role="comment">/*&#32;###########################&#32;&#32;Core&#32;Function&#32;Access&#32;&#32;###########################&#32;*/</emphasis>
34 <emphasis role="preprocessor">#if&#32;&#32;&#32;defined&#32;(&#32;__CC_ARM&#32;)&#32;</emphasis><emphasis role="comment">/*------------------RealView&#32;Compiler&#32;-----------------*/</emphasis><emphasis role="preprocessor"></emphasis>
35 <emphasis role="comment">/*&#32;ARM&#32;armcc&#32;specific&#32;functions&#32;*/</emphasis>
36 
37 <emphasis role="preprocessor">#if&#32;(__ARMCC_VERSION&#32;&lt;&#32;400677)</emphasis>
38 <emphasis role="preprocessor">&#32;&#32;#error&#32;&quot;Please&#32;use&#32;ARM&#32;Compiler&#32;Toolchain&#32;V4.0.677&#32;or&#32;later!&quot;</emphasis>
39 <emphasis role="preprocessor">#endif</emphasis>
40 
41 <emphasis role="comment">/*&#32;intrinsic&#32;void&#32;__enable_irq();&#32;&#32;&#32;&#32;&#32;*/</emphasis>
42 <emphasis role="comment">/*&#32;intrinsic&#32;void&#32;__disable_irq();&#32;&#32;&#32;&#32;*/</emphasis>
43 
50 <emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__get_CONTROL(<emphasis role="keywordtype">void</emphasis>)
51 {
52 &#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;__regControl&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ASM(<emphasis role="stringliteral">&quot;control&quot;</emphasis>);
53 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(__regControl);
54 }
55 
56 
63 <emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__set_CONTROL(uint32_t&#32;control)
64 {
65 &#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;__regControl&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ASM(<emphasis role="stringliteral">&quot;control&quot;</emphasis>);
66 &#32;&#32;__regControl&#32;=&#32;control;
67 }
68 
69 
76 <emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__get_IPSR(<emphasis role="keywordtype">void</emphasis>)
77 {
78 &#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;__regIPSR&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ASM(<emphasis role="stringliteral">&quot;ipsr&quot;</emphasis>);
79 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(__regIPSR);
80 }
81 
82 
89 <emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__get_APSR(<emphasis role="keywordtype">void</emphasis>)
90 {
91 &#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;__regAPSR&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ASM(<emphasis role="stringliteral">&quot;apsr&quot;</emphasis>);
92 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(__regAPSR);
93 }
94 
95 
102 <emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__get_xPSR(<emphasis role="keywordtype">void</emphasis>)
103 {
104 &#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;__regXPSR&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ASM(<emphasis role="stringliteral">&quot;xpsr&quot;</emphasis>);
105 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(__regXPSR);
106 }
107 
108 
115 <emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__get_PSP(<emphasis role="keywordtype">void</emphasis>)
116 {
117 &#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;__regProcessStackPointer&#32;&#32;__ASM(<emphasis role="stringliteral">&quot;psp&quot;</emphasis>);
118 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(__regProcessStackPointer);
119 }
120 
121 
128 <emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__set_PSP(uint32_t&#32;topOfProcStack)
129 {
130 &#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;__regProcessStackPointer&#32;&#32;__ASM(<emphasis role="stringliteral">&quot;psp&quot;</emphasis>);
131 &#32;&#32;__regProcessStackPointer&#32;=&#32;topOfProcStack;
132 }
133 
134 
141 <emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__get_MSP(<emphasis role="keywordtype">void</emphasis>)
142 {
143 &#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;__regMainStackPointer&#32;&#32;&#32;&#32;&#32;__ASM(<emphasis role="stringliteral">&quot;msp&quot;</emphasis>);
144 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(__regMainStackPointer);
145 }
146 
147 
154 <emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__set_MSP(uint32_t&#32;topOfMainStack)
155 {
156 &#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;__regMainStackPointer&#32;&#32;&#32;&#32;&#32;__ASM(<emphasis role="stringliteral">&quot;msp&quot;</emphasis>);
157 &#32;&#32;__regMainStackPointer&#32;=&#32;topOfMainStack;
158 }
159 
160 
167 <emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__get_PRIMASK(<emphasis role="keywordtype">void</emphasis>)
168 {
169 &#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;__regPriMask&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ASM(<emphasis role="stringliteral">&quot;primask&quot;</emphasis>);
170 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(__regPriMask);
171 }
172 
173 
180 <emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__set_PRIMASK(uint32_t&#32;priMask)
181 {
182 &#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;__regPriMask&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ASM(<emphasis role="stringliteral">&quot;primask&quot;</emphasis>);
183 &#32;&#32;__regPriMask&#32;=&#32;(priMask);
184 }
185 &#32;
186 
187 <emphasis role="preprocessor">#if&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__CORTEX_M&#32;&gt;=&#32;0x03)</emphasis>
188 
194 <emphasis role="preprocessor">#define&#32;__enable_fault_irq&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__enable_fiq</emphasis>
195 
196 
202 <emphasis role="preprocessor">#define&#32;__disable_fault_irq&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__disable_fiq</emphasis>
203 
204 
211 <emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;&#32;__get_BASEPRI(<emphasis role="keywordtype">void</emphasis>)
212 {
213 &#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;__regBasePri&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ASM(<emphasis role="stringliteral">&quot;basepri&quot;</emphasis>);
214 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(__regBasePri);
215 }
216 
217 
224 <emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__set_BASEPRI(uint32_t&#32;basePri)
225 {
226 &#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;__regBasePri&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ASM(<emphasis role="stringliteral">&quot;basepri&quot;</emphasis>);
227 &#32;&#32;__regBasePri&#32;=&#32;(basePri&#32;&amp;&#32;0xff);
228 }
229 &#32;
230 
237 <emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__get_FAULTMASK(<emphasis role="keywordtype">void</emphasis>)
238 {
239 &#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;__regFaultMask&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ASM(<emphasis role="stringliteral">&quot;faultmask&quot;</emphasis>);
240 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(__regFaultMask);
241 }
242 
243 
250 <emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__set_FAULTMASK(uint32_t&#32;faultMask)
251 {
252 &#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;__regFaultMask&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ASM(<emphasis role="stringliteral">&quot;faultmask&quot;</emphasis>);
253 &#32;&#32;__regFaultMask&#32;=&#32;(faultMask&#32;&amp;&#32;(uint32_t)1);
254 }
255 
256 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;(__CORTEX_M&#32;&gt;=&#32;0x03)&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
257 
258 
259 <emphasis role="preprocessor">#if&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__CORTEX_M&#32;==&#32;0x04)</emphasis>
260 
267 <emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__get_FPSCR(<emphasis role="keywordtype">void</emphasis>)
268 {
269 <emphasis role="preprocessor">#if&#32;(__FPU_PRESENT&#32;==&#32;1)&#32;&amp;&amp;&#32;(__FPU_USED&#32;==&#32;1)</emphasis>
270 &#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;__regfpscr&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ASM(<emphasis role="stringliteral">&quot;fpscr&quot;</emphasis>);
271 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(__regfpscr);
272 <emphasis role="preprocessor">#else</emphasis>
273 &#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(0);
274 <emphasis role="preprocessor">#endif</emphasis>
275 }
276 
277 
284 <emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__set_FPSCR(uint32_t&#32;fpscr)
285 {
286 <emphasis role="preprocessor">#if&#32;(__FPU_PRESENT&#32;==&#32;1)&#32;&amp;&amp;&#32;(__FPU_USED&#32;==&#32;1)</emphasis>
287 &#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;__regfpscr&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ASM(<emphasis role="stringliteral">&quot;fpscr&quot;</emphasis>);
288 &#32;&#32;__regfpscr&#32;=&#32;(fpscr);
289 <emphasis role="preprocessor">#endif</emphasis>
290 }
291 
292 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;(__CORTEX_M&#32;==&#32;0x04)&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
293 
294 
295 <emphasis role="preprocessor">#elif&#32;defined&#32;(&#32;__ICCARM__&#32;)&#32;</emphasis><emphasis role="comment">/*------------------&#32;ICC&#32;Compiler&#32;-------------------*/</emphasis><emphasis role="preprocessor"></emphasis>
296 <emphasis role="comment">/*&#32;IAR&#32;iccarm&#32;specific&#32;functions&#32;*/</emphasis>
297 
298 <emphasis role="preprocessor">#include&#32;&lt;cmsis_iar.h&gt;</emphasis>
299 
300 <emphasis role="preprocessor">#elif&#32;defined&#32;(&#32;__GNUC__&#32;)&#32;</emphasis><emphasis role="comment">/*------------------&#32;GNU&#32;Compiler&#32;---------------------*/</emphasis><emphasis role="preprocessor"></emphasis>
301 <emphasis role="comment">/*&#32;GNU&#32;gcc&#32;specific&#32;functions&#32;*/</emphasis>
302 
308 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__enable_irq(<emphasis role="keywordtype">void</emphasis>)
309 {
310 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;cpsie&#32;i&quot;</emphasis>);
311 }
312 
313 
319 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__disable_irq(<emphasis role="keywordtype">void</emphasis>)
320 {
321 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;cpsid&#32;i&quot;</emphasis>);
322 }
323 
324 
331 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__get_CONTROL(<emphasis role="keywordtype">void</emphasis>)
332 {
333 &#32;&#32;uint32_t&#32;result;
334 
335 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MRS&#32;%0,&#32;control&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
336 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
337 }
338 
339 
346 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__set_CONTROL(uint32_t&#32;control)
347 {
348 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MSR&#32;control,&#32;%0&quot;</emphasis>&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(control)&#32;);
349 }
350 
351 
358 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__get_IPSR(<emphasis role="keywordtype">void</emphasis>)
359 {
360 &#32;&#32;uint32_t&#32;result;
361 
362 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MRS&#32;%0,&#32;ipsr&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
363 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
364 }
365 
366 
373 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__get_APSR(<emphasis role="keywordtype">void</emphasis>)
374 {
375 &#32;&#32;uint32_t&#32;result;
376 
377 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MRS&#32;%0,&#32;apsr&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
378 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
379 }
380 
381 
388 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__get_xPSR(<emphasis role="keywordtype">void</emphasis>)
389 {
390 &#32;&#32;uint32_t&#32;result;
391 
392 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MRS&#32;%0,&#32;xpsr&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
393 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
394 }
395 
396 
403 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__get_PSP(<emphasis role="keywordtype">void</emphasis>)
404 {
405 &#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;result;
406 
407 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MRS&#32;%0,&#32;psp\n&quot;</emphasis>&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
408 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
409 }
410 &#32;
411 
418 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__set_PSP(uint32_t&#32;topOfProcStack)
419 {
420 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MSR&#32;psp,&#32;%0\n&quot;</emphasis>&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(topOfProcStack)&#32;);
421 }
422 
423 
430 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__get_MSP(<emphasis role="keywordtype">void</emphasis>)
431 {
432 &#32;&#32;<emphasis role="keyword">register</emphasis>&#32;uint32_t&#32;result;
433 
434 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MRS&#32;%0,&#32;msp\n&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
435 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
436 }
437 &#32;
438 
445 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__set_MSP(uint32_t&#32;topOfMainStack)
446 {
447 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MSR&#32;msp,&#32;%0\n&quot;</emphasis>&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(topOfMainStack)&#32;);
448 }
449 
450 
457 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__get_PRIMASK(<emphasis role="keywordtype">void</emphasis>)
458 {
459 &#32;&#32;uint32_t&#32;result;
460 
461 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MRS&#32;%0,&#32;primask&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
462 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
463 }
464 
465 
472 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__set_PRIMASK(uint32_t&#32;priMask)
473 {
474 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MSR&#32;primask,&#32;%0&quot;</emphasis>&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(priMask)&#32;);
475 }
476 &#32;
477 
478 <emphasis role="preprocessor">#if&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__CORTEX_M&#32;&gt;=&#32;0x03)</emphasis>
479 
485 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__enable_fault_irq(<emphasis role="keywordtype">void</emphasis>)
486 {
487 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;cpsie&#32;f&quot;</emphasis>);
488 }
489 
490 
496 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__disable_fault_irq(<emphasis role="keywordtype">void</emphasis>)
497 {
498 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;cpsid&#32;f&quot;</emphasis>);
499 }
500 
501 
508 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__get_BASEPRI(<emphasis role="keywordtype">void</emphasis>)
509 {
510 &#32;&#32;uint32_t&#32;result;
511 &#32;&#32;
512 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MRS&#32;%0,&#32;basepri_max&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
513 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
514 }
515 
516 
523 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__set_BASEPRI(uint32_t&#32;value)
524 {
525 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MSR&#32;basepri,&#32;%0&quot;</emphasis>&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(value)&#32;);
526 }
527 
528 
535 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__get_FAULTMASK(<emphasis role="keywordtype">void</emphasis>)
536 {
537 &#32;&#32;uint32_t&#32;result;
538 &#32;&#32;
539 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MRS&#32;%0,&#32;faultmask&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
540 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
541 }
542 
543 
550 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__set_FAULTMASK(uint32_t&#32;faultMask)
551 {
552 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;MSR&#32;faultmask,&#32;%0&quot;</emphasis>&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(faultMask)&#32;);
553 }
554 
555 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;(__CORTEX_M&#32;&gt;=&#32;0x03)&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
556 
557 
558 <emphasis role="preprocessor">#if&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__CORTEX_M&#32;==&#32;0x04)</emphasis>
559 
566 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__get_FPSCR(<emphasis role="keywordtype">void</emphasis>)
567 {
568 <emphasis role="preprocessor">#if&#32;(__FPU_PRESENT&#32;==&#32;1)&#32;&amp;&amp;&#32;(__FPU_USED&#32;==&#32;1)</emphasis>
569 &#32;&#32;uint32_t&#32;result;
570 
571 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;VMRS&#32;%0,&#32;fpscr&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;);
572 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
573 <emphasis role="preprocessor">#else</emphasis>
574 &#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(0);
575 <emphasis role="preprocessor">#endif</emphasis>
576 }
577 
578 
585 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;__set_FPSCR(uint32_t&#32;fpscr)
586 {
587 <emphasis role="preprocessor">#if&#32;(__FPU_PRESENT&#32;==&#32;1)&#32;&amp;&amp;&#32;(__FPU_USED&#32;==&#32;1)</emphasis>
588 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;VMSR&#32;fpscr,&#32;%0&quot;</emphasis>&#32;:&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(fpscr)&#32;);
589 <emphasis role="preprocessor">#endif</emphasis>
590 }
591 
592 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;(__CORTEX_M&#32;==&#32;0x04)&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
593 
594 
595 <emphasis role="preprocessor">#elif&#32;defined&#32;(&#32;__TASKING__&#32;)&#32;</emphasis><emphasis role="comment">/*------------------&#32;TASKING&#32;Compiler&#32;--------------*/</emphasis><emphasis role="preprocessor"></emphasis>
596 <emphasis role="comment">/*&#32;TASKING&#32;carm&#32;specific&#32;functions&#32;*/</emphasis>
597 
598 <emphasis role="comment">/*</emphasis>
599 <emphasis role="comment">&#32;*&#32;The&#32;CMSIS&#32;functions&#32;have&#32;been&#32;implemented&#32;as&#32;intrinsics&#32;in&#32;the&#32;compiler.</emphasis>
600 <emphasis role="comment">&#32;*&#32;Please&#32;use&#32;&quot;carm&#32;-?i&quot;&#32;to&#32;get&#32;an&#32;up&#32;to&#32;date&#32;list&#32;of&#32;all&#32;instrinsics,</emphasis>
601 <emphasis role="comment">&#32;*&#32;Including&#32;the&#32;CMSIS&#32;ones.</emphasis>
602 <emphasis role="comment">&#32;*/</emphasis>
603 
604 <emphasis role="preprocessor">#endif</emphasis>
605 
609 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;__CORE_CMFUNC_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
