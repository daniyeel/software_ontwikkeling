<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_logic__layer_8c" xml:lang="en-US">
<title>CUBE_IDE/VGA/Core/Src/logic_layer.c File Reference</title>
<indexterm><primary>CUBE_IDE/VGA/Core/Src/logic_layer.c</primary></indexterm>
<para>

<para>Here commands will be processed and executed. </para>
 
</para>
<programlisting linenumbering="unnumbered">#include &quot;logic_layer.h&quot;<?linebreak?></programlisting><simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>int <link linkend="_logic__layer_8c_1a8defaa134a23a988d2749fc0171427d2">parse_cmd</link> (<link linkend="_struct_u_a_r_t___communication">UART</link> data)</para>

<para>Function that parses the command of the received script. </para>
</listitem>
            <listitem><para>int <link linkend="_logic__layer_8c_1a243278ee7910d29b226c9e84b21dbeaa">draw_options</link> (char cmd, <link linkend="_struct_u_a_r_t___communication">UART</link> data)</para>

<para>Function that determines with the command which function should be used, Here the script also get parsed further and decodes ASCII to useful data. </para>
</listitem>
            <listitem><para><link linkend="_struct_p_a_r_s_e___s_t_o_r_a_g_e">PARSE</link> <link linkend="_logic__layer_8c_1a57c29aee18fbaa7bc92e6d1273fb2136">parse_data</link> (<link linkend="_struct_p_a_r_s_e___s_t_o_r_a_g_e">PARSE</link> parsing, <link linkend="_struct_u_a_r_t___communication">UART</link> data, int LEN, int var_counter, int num_checker, int let_checker, int num_counter)</para>

<para>This function is used for parsing data and converts ASCII to decimals. </para>
</listitem>
            <listitem><para>int <link linkend="_logic__layer_8c_1afb5290ca19b5ae1c82c875bcfc3487ff">number_converter</link> (char ASCII)</para>

<para>Function that converts ASCII numbers to decimals. </para>
</listitem>
            <listitem><para><link linkend="_struct_p_a_r_s_e___s_t_o_r_a_g_e">PARSE</link> <link linkend="_logic__layer_8c_1ae92a6df3661987925f02f126ee04ffc8">color_assign</link> (<link linkend="_struct_u_a_r_t___communication">UART</link> data, int i, <link linkend="_struct_p_a_r_s_e___s_t_o_r_a_g_e">PARSE</link> parsing)</para>

<para>Function that reads received script text and when possible converts this to the correspondiong color. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_logic__layer_8c_1a3e55ff27d8b3a69bd168c46d7771a8bc"/>char <emphasis role="strong">cmd</emphasis> [MAX_CMD_LEN] = {0}</para>
</listitem>
            <listitem><para>char <link linkend="_logic__layer_8c_1a3f908f4fc497ddc1bd104aa28e1e16c6">compare_cmd</link> [4][MAX_CMD_LEN]</para>
</listitem>
            <listitem><para>char <link linkend="_logic__layer_8c_1a1c084c2a96d80aa53d0aed353f84c6ef">compare_col</link> [16][MAX_COL_LEN]</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Here commands will be processed and executed. </para>

<para><formalpara><title>Authors</title>

<para>Skip Wijtman </para>
</formalpara>
<formalpara><title>Date</title>

<para>24-5-2023 </para>
</formalpara>
<formalpara><title>Version</title>

<para>1.2 </para>
</formalpara>
</para>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_logic__layer_8c_1ae92a6df3661987925f02f126ee04ffc8"/><section>
    <title>color_assign()</title>
<indexterm><primary>color_assign</primary><secondary>logic_layer.c</secondary></indexterm>
<indexterm><primary>logic_layer.c</primary><secondary>color_assign</secondary></indexterm>
<para><computeroutput><link linkend="_struct_p_a_r_s_e___s_t_o_r_a_g_e">PARSE</link> color_assign (<link linkend="_struct_u_a_r_t___communication">UART</link> data, int i, <link linkend="_struct_p_a_r_s_e___s_t_o_r_a_g_e">PARSE</link> parsing)</computeroutput></para><para>

<para>Function that reads received script text and when possible converts this to the correspondiong color. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>data</entry><entry>
<para>is a struct variable with the received script </para>
</entry>
                            </row>
                            <row>
<entry>i</entry><entry>
<para>is the variable for the loop iterator</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>parsing is a struct variable with data info which are retrieved from the script </para>
</formalpara>
</para>
</section>
<anchor xml:id="_logic__layer_8c_1a243278ee7910d29b226c9e84b21dbeaa"/><section>
    <title>draw_options()</title>
<indexterm><primary>draw_options</primary><secondary>logic_layer.c</secondary></indexterm>
<indexterm><primary>logic_layer.c</primary><secondary>draw_options</secondary></indexterm>
<para><computeroutput>int draw_options (char cmd, <link linkend="_struct_u_a_r_t___communication">UART</link> data)</computeroutput></para><para>

<para>Function that determines with the command which function should be used, Here the script also get parsed further and decodes ASCII to useful data. </para>
</para>

<para>Here a switch-case is used to determine the received command, Cases 0 to 4 are numbered as followed:</para>

<para><orderedlist>
<listitem>
<para>lijn</para>
</listitem><listitem>
<para>rechthoek</para>
</listitem><listitem>
<para>clearscherm</para>
</listitem><listitem>
<para>tekst</para>
</listitem><listitem>
<para>bitmap</para>
</listitem></orderedlist>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>cmd</entry><entry>
<para>is a interger of the found command </para>
</entry>
                            </row>
                            <row>
<entry>data</entry><entry>
<para>is a struct variable with the received script</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Error code </para>
</formalpara>
</para>
</section>
<anchor xml:id="_logic__layer_8c_1afb5290ca19b5ae1c82c875bcfc3487ff"/><section>
    <title>number_converter()</title>
<indexterm><primary>number_converter</primary><secondary>logic_layer.c</secondary></indexterm>
<indexterm><primary>logic_layer.c</primary><secondary>number_converter</secondary></indexterm>
<para><computeroutput>int number_converter (char ASCII)</computeroutput></para><para>

<para>Function that converts ASCII numbers to decimals. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ASCII</entry><entry>
<para>is character of a ASCII number</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>decimal number </para>
</formalpara>
</para>
</section>
<anchor xml:id="_logic__layer_8c_1a8defaa134a23a988d2749fc0171427d2"/><section>
    <title>parse_cmd()</title>
<indexterm><primary>parse_cmd</primary><secondary>logic_layer.c</secondary></indexterm>
<indexterm><primary>logic_layer.c</primary><secondary>parse_cmd</secondary></indexterm>
<para><computeroutput>int parse_cmd (<link linkend="_struct_u_a_r_t___communication">UART</link> data)</computeroutput></para><para>

<para>Function that parses the command of the received script. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>data</entry><entry>
<para>is a struct variable with the received script</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Error code or the current index of found </para>
</formalpara>
</para>
</section>
<anchor xml:id="_logic__layer_8c_1a57c29aee18fbaa7bc92e6d1273fb2136"/><section>
    <title>parse_data()</title>
<indexterm><primary>parse_data</primary><secondary>logic_layer.c</secondary></indexterm>
<indexterm><primary>logic_layer.c</primary><secondary>parse_data</secondary></indexterm>
<para><computeroutput><link linkend="_struct_p_a_r_s_e___s_t_o_r_a_g_e">PARSE</link> parse_data (<link linkend="_struct_p_a_r_s_e___s_t_o_r_a_g_e">PARSE</link> parsing, <link linkend="_struct_u_a_r_t___communication">UART</link> data, int LEN, int var_counter, int num_checker, int let_checker, int num_counter)</computeroutput></para><para>

<para>This function is used for parsing data and converts ASCII to decimals. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>parsing</entry><entry>
<para>is a struct variable that stores all needed data for functions </para>
</entry>
                            </row>
                            <row>
<entry>data</entry><entry>
<para>is a struct variable with the received script </para>
</entry>
                            </row>
                            <row>
<entry>LEN</entry><entry>
<para></para>
</entry>
                            </row>
                            <row>
<entry>var_counter</entry><entry>
<para></para>
</entry>
                            </row>
                            <row>
<entry>num_checker</entry><entry>
<para></para>
</entry>
                            </row>
                            <row>
<entry>let_checker</entry><entry>
<para></para>
</entry>
                            </row>
                            <row>
<entry>num_counter</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Error code </para>
</formalpara>
</para>
</section>
</section>
<section>
<title>Variable Documentation</title>
<anchor xml:id="_logic__layer_8c_1a3f908f4fc497ddc1bd104aa28e1e16c6"/><section>
    <title>compare_cmd</title>
<indexterm><primary>compare_cmd</primary><secondary>logic_layer.c</secondary></indexterm>
<indexterm><primary>logic_layer.c</primary><secondary>compare_cmd</secondary></indexterm>
<para><computeroutput>char compare_cmd[4][MAX_CMD_LEN]</computeroutput></para><emphasis role="strong">Initial value:</emphasis><programlisting linenumbering="unnumbered">=&#32;{&#32;{<emphasis role="stringliteral">&quot;lijn&quot;</emphasis>},
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;rechthoek&quot;</emphasis>},
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;clearscherm&quot;</emphasis>},
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;bitmap&quot;</emphasis>}}
</programlisting></section>
<anchor xml:id="_logic__layer_8c_1a1c084c2a96d80aa53d0aed353f84c6ef"/><section>
    <title>compare_col</title>
<indexterm><primary>compare_col</primary><secondary>logic_layer.c</secondary></indexterm>
<indexterm><primary>logic_layer.c</primary><secondary>compare_col</secondary></indexterm>
<para><computeroutput>char compare_col[16][MAX_COL_LEN]</computeroutput></para><emphasis role="strong">Initial value:</emphasis><programlisting linenumbering="unnumbered">=&#32;{&#32;{<emphasis role="stringliteral">&quot;zwart&quot;</emphasis>},
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;blauw&quot;</emphasis>},
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;lichtblauw&quot;</emphasis>},
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;groen&quot;</emphasis>},
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;lichtgroen&quot;</emphasis>},
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;cyaan&quot;</emphasis>},
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;lichtcyaan&quot;</emphasis>},
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;rood&quot;</emphasis>},
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;lichtrood&quot;</emphasis>},
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;magenta&quot;</emphasis>},
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;lichtmagenta&quot;</emphasis>},
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;bruin&quot;</emphasis>},
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;geel&quot;</emphasis>},
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;grijs&quot;</emphasis>},
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;roze&quot;</emphasis>},
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;wit&quot;</emphasis>}}
</programlisting></section>
</section>
</section>
