<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_core__cm4__simd_8h_source" xml:lang="en-US">
<title>core_cm4_simd.h</title>
<indexterm><primary>CUBE_IDE/VGA/Core/Inc/core_cm4_simd.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">/**************************************************************************/</emphasis>
24 <emphasis role="preprocessor">#ifdef&#32;__cplusplus</emphasis>
25 &#32;<emphasis role="keyword">extern</emphasis>&#32;<emphasis role="stringliteral">&quot;C&quot;</emphasis>&#32;{
26 <emphasis role="preprocessor">#endif&#32;</emphasis>
27 
28 <emphasis role="preprocessor">#ifndef&#32;__CORE_CM4_SIMD_H</emphasis>
29 <emphasis role="preprocessor">#define&#32;__CORE_CM4_SIMD_H</emphasis>
30 
31 
32 <emphasis role="comment">/*******************************************************************************</emphasis>
33 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Hardware&#32;Abstraction&#32;Layer</emphasis>
34 <emphasis role="comment">&#32;******************************************************************************/</emphasis>
35 
36 
37 <emphasis role="comment">/*&#32;###################&#32;&#32;Compiler&#32;specific&#32;Intrinsics&#32;&#32;###########################&#32;*/</emphasis>
43 <emphasis role="preprocessor">#if&#32;&#32;&#32;defined&#32;(&#32;__CC_ARM&#32;)&#32;</emphasis><emphasis role="comment">/*------------------RealView&#32;Compiler&#32;-----------------*/</emphasis><emphasis role="preprocessor"></emphasis>
44 <emphasis role="comment">/*&#32;ARM&#32;armcc&#32;specific&#32;functions&#32;*/</emphasis>
45 
46 <emphasis role="comment">/*------&#32;CM4&#32;SOMD&#32;Intrinsics&#32;-----------------------------------------------------*/</emphasis>
47 <emphasis role="preprocessor">#define&#32;__SADD8&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sadd8</emphasis>
48 <emphasis role="preprocessor">#define&#32;__QADD8&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__qadd8</emphasis>
49 <emphasis role="preprocessor">#define&#32;__SHADD8&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__shadd8</emphasis>
50 <emphasis role="preprocessor">#define&#32;__UADD8&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__uadd8</emphasis>
51 <emphasis role="preprocessor">#define&#32;__UQADD8&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__uqadd8</emphasis>
52 <emphasis role="preprocessor">#define&#32;__UHADD8&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__uhadd8</emphasis>
53 <emphasis role="preprocessor">#define&#32;__SSUB8&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ssub8</emphasis>
54 <emphasis role="preprocessor">#define&#32;__QSUB8&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__qsub8</emphasis>
55 <emphasis role="preprocessor">#define&#32;__SHSUB8&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__shsub8</emphasis>
56 <emphasis role="preprocessor">#define&#32;__USUB8&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__usub8</emphasis>
57 <emphasis role="preprocessor">#define&#32;__UQSUB8&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__uqsub8</emphasis>
58 <emphasis role="preprocessor">#define&#32;__UHSUB8&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__uhsub8</emphasis>
59 <emphasis role="preprocessor">#define&#32;__SADD16&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sadd16</emphasis>
60 <emphasis role="preprocessor">#define&#32;__QADD16&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__qadd16</emphasis>
61 <emphasis role="preprocessor">#define&#32;__SHADD16&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__shadd16</emphasis>
62 <emphasis role="preprocessor">#define&#32;__UADD16&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__uadd16</emphasis>
63 <emphasis role="preprocessor">#define&#32;__UQADD16&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__uqadd16</emphasis>
64 <emphasis role="preprocessor">#define&#32;__UHADD16&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__uhadd16</emphasis>
65 <emphasis role="preprocessor">#define&#32;__SSUB16&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ssub16</emphasis>
66 <emphasis role="preprocessor">#define&#32;__QSUB16&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__qsub16</emphasis>
67 <emphasis role="preprocessor">#define&#32;__SHSUB16&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__shsub16</emphasis>
68 <emphasis role="preprocessor">#define&#32;__USUB16&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__usub16</emphasis>
69 <emphasis role="preprocessor">#define&#32;__UQSUB16&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__uqsub16</emphasis>
70 <emphasis role="preprocessor">#define&#32;__UHSUB16&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__uhsub16</emphasis>
71 <emphasis role="preprocessor">#define&#32;__SASX&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sasx</emphasis>
72 <emphasis role="preprocessor">#define&#32;__QASX&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__qasx</emphasis>
73 <emphasis role="preprocessor">#define&#32;__SHASX&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__shasx</emphasis>
74 <emphasis role="preprocessor">#define&#32;__UASX&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__uasx</emphasis>
75 <emphasis role="preprocessor">#define&#32;__UQASX&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__uqasx</emphasis>
76 <emphasis role="preprocessor">#define&#32;__UHASX&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__uhasx</emphasis>
77 <emphasis role="preprocessor">#define&#32;__SSAX&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ssax</emphasis>
78 <emphasis role="preprocessor">#define&#32;__QSAX&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__qsax</emphasis>
79 <emphasis role="preprocessor">#define&#32;__SHSAX&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__shsax</emphasis>
80 <emphasis role="preprocessor">#define&#32;__USAX&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__usax</emphasis>
81 <emphasis role="preprocessor">#define&#32;__UQSAX&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__uqsax</emphasis>
82 <emphasis role="preprocessor">#define&#32;__UHSAX&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__uhsax</emphasis>
83 <emphasis role="preprocessor">#define&#32;__USAD8&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__usad8</emphasis>
84 <emphasis role="preprocessor">#define&#32;__USADA8&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__usada8</emphasis>
85 <emphasis role="preprocessor">#define&#32;__SSAT16&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ssat16</emphasis>
86 <emphasis role="preprocessor">#define&#32;__USAT16&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__usat16</emphasis>
87 <emphasis role="preprocessor">#define&#32;__UXTB16&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__uxtb16</emphasis>
88 <emphasis role="preprocessor">#define&#32;__UXTAB16&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__uxtab16</emphasis>
89 <emphasis role="preprocessor">#define&#32;__SXTB16&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sxtb16</emphasis>
90 <emphasis role="preprocessor">#define&#32;__SXTAB16&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sxtab16</emphasis>
91 <emphasis role="preprocessor">#define&#32;__SMUAD&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__smuad</emphasis>
92 <emphasis role="preprocessor">#define&#32;__SMUADX&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__smuadx</emphasis>
93 <emphasis role="preprocessor">#define&#32;__SMLAD&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__smlad</emphasis>
94 <emphasis role="preprocessor">#define&#32;__SMLADX&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__smladx</emphasis>
95 <emphasis role="preprocessor">#define&#32;__SMLALD&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__smlald</emphasis>
96 <emphasis role="preprocessor">#define&#32;__SMLALDX&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__smlaldx</emphasis>
97 <emphasis role="preprocessor">#define&#32;__SMUSD&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__smusd</emphasis>
98 <emphasis role="preprocessor">#define&#32;__SMUSDX&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__smusdx</emphasis>
99 <emphasis role="preprocessor">#define&#32;__SMLSD&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__smlsd</emphasis>
100 <emphasis role="preprocessor">#define&#32;__SMLSDX&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__smlsdx</emphasis>
101 <emphasis role="preprocessor">#define&#32;__SMLSLD&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__smlsld</emphasis>
102 <emphasis role="preprocessor">#define&#32;__SMLSLDX&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__smlsldx</emphasis>
103 <emphasis role="preprocessor">#define&#32;__SEL&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sel</emphasis>
104 <emphasis role="preprocessor">#define&#32;__QADD&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__qadd</emphasis>
105 <emphasis role="preprocessor">#define&#32;__QSUB&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__qsub</emphasis>
106 
107 <emphasis role="preprocessor">#define&#32;__PKHBT(ARG1,ARG2,ARG3)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;((((uint32_t)(ARG1))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;&amp;&#32;0x0000FFFFUL)&#32;|&#32;&#32;\</emphasis>
108 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((((uint32_t)(ARG2))&#32;&lt;&lt;&#32;(ARG3))&#32;&amp;&#32;0xFFFF0000UL)&#32;&#32;)</emphasis>
109 
110 <emphasis role="preprocessor">#define&#32;__PKHTB(ARG1,ARG2,ARG3)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;((((uint32_t)(ARG1))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;&amp;&#32;0xFFFF0000UL)&#32;|&#32;&#32;\</emphasis>
111 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((((uint32_t)(ARG2))&#32;&gt;&gt;&#32;(ARG3))&#32;&amp;&#32;0x0000FFFFUL)&#32;&#32;)</emphasis>
112 
113 
114 <emphasis role="comment">/*--&#32;End&#32;CM4&#32;SIMD&#32;Intrinsics&#32;-----------------------------------------------------*/</emphasis>
115 
116 
117 
118 <emphasis role="preprocessor">#elif&#32;defined&#32;(&#32;__ICCARM__&#32;)&#32;</emphasis><emphasis role="comment">/*------------------&#32;ICC&#32;Compiler&#32;-------------------*/</emphasis><emphasis role="preprocessor"></emphasis>
119 <emphasis role="comment">/*&#32;IAR&#32;iccarm&#32;specific&#32;functions&#32;*/</emphasis>
120 
121 <emphasis role="preprocessor">#include&#32;&lt;cmsis_iar.h&gt;</emphasis>
122 
123 <emphasis role="comment">/*------&#32;CM4&#32;SIMDDSP&#32;Intrinsics&#32;-----------------------------------------------------*/</emphasis>
124 <emphasis role="comment">/*&#32;intrinsic&#32;__SADD8&#32;&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
125 <emphasis role="comment">/*&#32;intrinsic&#32;__QADD8&#32;&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
126 <emphasis role="comment">/*&#32;intrinsic&#32;__SHADD8&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
127 <emphasis role="comment">/*&#32;intrinsic&#32;__UADD8&#32;&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
128 <emphasis role="comment">/*&#32;intrinsic&#32;__UQADD8&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
129 <emphasis role="comment">/*&#32;intrinsic&#32;__UHADD8&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
130 <emphasis role="comment">/*&#32;intrinsic&#32;__SSUB8&#32;&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
131 <emphasis role="comment">/*&#32;intrinsic&#32;__QSUB8&#32;&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
132 <emphasis role="comment">/*&#32;intrinsic&#32;__SHSUB8&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
133 <emphasis role="comment">/*&#32;intrinsic&#32;__USUB8&#32;&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
134 <emphasis role="comment">/*&#32;intrinsic&#32;__UQSUB8&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
135 <emphasis role="comment">/*&#32;intrinsic&#32;__UHSUB8&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
136 <emphasis role="comment">/*&#32;intrinsic&#32;__SADD16&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
137 <emphasis role="comment">/*&#32;intrinsic&#32;__QADD16&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
138 <emphasis role="comment">/*&#32;intrinsic&#32;__SHADD16&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
139 <emphasis role="comment">/*&#32;intrinsic&#32;__UADD16&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
140 <emphasis role="comment">/*&#32;intrinsic&#32;__UQADD16&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
141 <emphasis role="comment">/*&#32;intrinsic&#32;__UHADD16&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
142 <emphasis role="comment">/*&#32;intrinsic&#32;__SSUB16&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
143 <emphasis role="comment">/*&#32;intrinsic&#32;__QSUB16&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
144 <emphasis role="comment">/*&#32;intrinsic&#32;__SHSUB16&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
145 <emphasis role="comment">/*&#32;intrinsic&#32;__USUB16&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
146 <emphasis role="comment">/*&#32;intrinsic&#32;__UQSUB16&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
147 <emphasis role="comment">/*&#32;intrinsic&#32;__UHSUB16&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
148 <emphasis role="comment">/*&#32;intrinsic&#32;__SASX&#32;&#32;&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
149 <emphasis role="comment">/*&#32;intrinsic&#32;__QASX&#32;&#32;&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
150 <emphasis role="comment">/*&#32;intrinsic&#32;__SHASX&#32;&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
151 <emphasis role="comment">/*&#32;intrinsic&#32;__UASX&#32;&#32;&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
152 <emphasis role="comment">/*&#32;intrinsic&#32;__UQASX&#32;&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
153 <emphasis role="comment">/*&#32;intrinsic&#32;__UHASX&#32;&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
154 <emphasis role="comment">/*&#32;intrinsic&#32;__SSAX&#32;&#32;&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
155 <emphasis role="comment">/*&#32;intrinsic&#32;__QSAX&#32;&#32;&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
156 <emphasis role="comment">/*&#32;intrinsic&#32;__SHSAX&#32;&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
157 <emphasis role="comment">/*&#32;intrinsic&#32;__USAX&#32;&#32;&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
158 <emphasis role="comment">/*&#32;intrinsic&#32;__UQSAX&#32;&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
159 <emphasis role="comment">/*&#32;intrinsic&#32;__UHSAX&#32;&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
160 <emphasis role="comment">/*&#32;intrinsic&#32;__USAD8&#32;&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
161 <emphasis role="comment">/*&#32;intrinsic&#32;__USADA8&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
162 <emphasis role="comment">/*&#32;intrinsic&#32;__SSAT16&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
163 <emphasis role="comment">/*&#32;intrinsic&#32;__USAT16&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
164 <emphasis role="comment">/*&#32;intrinsic&#32;__UXTB16&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
165 <emphasis role="comment">/*&#32;intrinsic&#32;__SXTB16&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
166 <emphasis role="comment">/*&#32;intrinsic&#32;__UXTAB16&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
167 <emphasis role="comment">/*&#32;intrinsic&#32;__SXTAB16&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
168 <emphasis role="comment">/*&#32;intrinsic&#32;__SMUAD&#32;&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
169 <emphasis role="comment">/*&#32;intrinsic&#32;__SMUADX&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
170 <emphasis role="comment">/*&#32;intrinsic&#32;__SMLAD&#32;&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
171 <emphasis role="comment">/*&#32;intrinsic&#32;__SMLADX&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
172 <emphasis role="comment">/*&#32;intrinsic&#32;__SMLALD&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
173 <emphasis role="comment">/*&#32;intrinsic&#32;__SMLALDX&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
174 <emphasis role="comment">/*&#32;intrinsic&#32;__SMUSD&#32;&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
175 <emphasis role="comment">/*&#32;intrinsic&#32;__SMUSDX&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
176 <emphasis role="comment">/*&#32;intrinsic&#32;__SMLSD&#32;&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
177 <emphasis role="comment">/*&#32;intrinsic&#32;__SMLSDX&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
178 <emphasis role="comment">/*&#32;intrinsic&#32;__SMLSLD&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
179 <emphasis role="comment">/*&#32;intrinsic&#32;__SMLSLDX&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
180 <emphasis role="comment">/*&#32;intrinsic&#32;__SEL&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
181 <emphasis role="comment">/*&#32;intrinsic&#32;__QADD&#32;&#32;&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
182 <emphasis role="comment">/*&#32;intrinsic&#32;__QSUB&#32;&#32;&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
183 <emphasis role="comment">/*&#32;intrinsic&#32;__PKHBT&#32;&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
184 <emphasis role="comment">/*&#32;intrinsic&#32;__PKHTB&#32;&#32;&#32;&#32;&#32;&#32;see&#32;intrinsics.h&#32;*/</emphasis>
185 
186 <emphasis role="comment">/*--&#32;End&#32;CM4&#32;SIMD&#32;Intrinsics&#32;-----------------------------------------------------*/</emphasis>
187 
188 
189 
190 <emphasis role="preprocessor">#elif&#32;defined&#32;(&#32;__GNUC__&#32;)&#32;</emphasis><emphasis role="comment">/*------------------&#32;GNU&#32;Compiler&#32;---------------------*/</emphasis><emphasis role="preprocessor"></emphasis>
191 <emphasis role="comment">/*&#32;GNU&#32;gcc&#32;specific&#32;functions&#32;*/</emphasis>
192 
193 <emphasis role="comment">/*------&#32;CM4&#32;SIMD&#32;Intrinsics&#32;-----------------------------------------------------*/</emphasis>
194 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__SADD8(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
195 {
196 &#32;&#32;uint32_t&#32;result;
197 &#32;&#32;
198 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;sadd8&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
199 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
200 }
201 
202 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__QADD8(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
203 {
204 &#32;&#32;uint32_t&#32;result;
205 &#32;&#32;
206 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;qadd8&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
207 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
208 }
209 
210 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__SHADD8(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
211 {
212 &#32;&#32;uint32_t&#32;result;
213 &#32;&#32;
214 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;shadd8&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
215 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
216 }
217 
218 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__UADD8(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
219 {
220 &#32;&#32;uint32_t&#32;result;
221 &#32;&#32;
222 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;uadd8&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
223 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
224 }
225 
226 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__UQADD8(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
227 {
228 &#32;&#32;uint32_t&#32;result;
229 &#32;&#32;
230 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;uqadd8&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
231 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
232 }
233 
234 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__UHADD8(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
235 {
236 &#32;&#32;uint32_t&#32;result;
237 &#32;&#32;
238 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;uhadd8&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
239 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
240 }
241 
242 
243 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__SSUB8(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
244 {
245 &#32;&#32;uint32_t&#32;result;
246 &#32;&#32;
247 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;ssub8&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
248 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
249 }
250 
251 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__QSUB8(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
252 {
253 &#32;&#32;uint32_t&#32;result;
254 &#32;&#32;
255 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;qsub8&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
256 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
257 }
258 
259 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__SHSUB8(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
260 {
261 &#32;&#32;uint32_t&#32;result;
262 &#32;&#32;
263 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;shsub8&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
264 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
265 }
266 
267 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__USUB8(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
268 {
269 &#32;&#32;uint32_t&#32;result;
270 &#32;&#32;
271 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;usub8&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
272 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
273 }
274 
275 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__UQSUB8(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
276 {
277 &#32;&#32;uint32_t&#32;result;
278 &#32;&#32;
279 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;uqsub8&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
280 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
281 }
282 
283 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__UHSUB8(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
284 {
285 &#32;&#32;uint32_t&#32;result;
286 &#32;&#32;
287 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;uhsub8&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
288 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
289 }
290 
291 
292 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__SADD16(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
293 {
294 &#32;&#32;uint32_t&#32;result;
295 &#32;&#32;
296 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;sadd16&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
297 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
298 }
299 
300 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__QADD16(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
301 {
302 &#32;&#32;uint32_t&#32;result;
303 &#32;&#32;
304 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;qadd16&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
305 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
306 }
307 
308 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__SHADD16(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
309 {
310 &#32;&#32;uint32_t&#32;result;
311 &#32;&#32;
312 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;shadd16&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
313 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
314 }
315 
316 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__UADD16(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
317 {
318 &#32;&#32;uint32_t&#32;result;
319 &#32;&#32;
320 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;uadd16&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
321 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
322 }
323 
324 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__UQADD16(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
325 {
326 &#32;&#32;uint32_t&#32;result;
327 &#32;&#32;
328 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;uqadd16&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
329 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
330 }
331 
332 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__UHADD16(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
333 {
334 &#32;&#32;uint32_t&#32;result;
335 &#32;&#32;
336 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;uhadd16&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
337 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
338 }
339 
340 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__SSUB16(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
341 {
342 &#32;&#32;uint32_t&#32;result;
343 &#32;&#32;
344 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;ssub16&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
345 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
346 }
347 
348 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__QSUB16(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
349 {
350 &#32;&#32;uint32_t&#32;result;
351 &#32;&#32;
352 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;qsub16&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
353 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
354 }
355 
356 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__SHSUB16(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
357 {
358 &#32;&#32;uint32_t&#32;result;
359 &#32;&#32;
360 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;shsub16&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
361 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
362 }
363 
364 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__USUB16(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
365 {
366 &#32;&#32;uint32_t&#32;result;
367 &#32;&#32;
368 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;usub16&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
369 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
370 }
371 
372 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__UQSUB16(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
373 {
374 &#32;&#32;uint32_t&#32;result;
375 &#32;&#32;
376 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;uqsub16&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
377 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
378 }
379 
380 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__UHSUB16(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
381 {
382 &#32;&#32;uint32_t&#32;result;
383 &#32;&#32;
384 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;uhsub16&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
385 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
386 }
387 
388 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__SASX(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
389 {
390 &#32;&#32;uint32_t&#32;result;
391 &#32;&#32;
392 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;sasx&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
393 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
394 }
395 
396 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__QASX(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
397 {
398 &#32;&#32;uint32_t&#32;result;
399 &#32;&#32;
400 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;qasx&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
401 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
402 }
403 
404 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__SHASX(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
405 {
406 &#32;&#32;uint32_t&#32;result;
407 &#32;&#32;
408 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;shasx&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
409 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
410 }
411 
412 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__UASX(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
413 {
414 &#32;&#32;uint32_t&#32;result;
415 &#32;&#32;
416 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;uasx&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
417 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
418 }
419 
420 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__UQASX(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
421 {
422 &#32;&#32;uint32_t&#32;result;
423 &#32;&#32;
424 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;uqasx&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
425 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
426 }
427 
428 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__UHASX(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
429 {
430 &#32;&#32;uint32_t&#32;result;
431 &#32;&#32;
432 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;uhasx&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
433 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
434 }
435 
436 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__SSAX(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
437 {
438 &#32;&#32;uint32_t&#32;result;
439 &#32;&#32;
440 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;ssax&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
441 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
442 }
443 
444 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__QSAX(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
445 {
446 &#32;&#32;uint32_t&#32;result;
447 &#32;&#32;
448 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;qsax&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
449 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
450 }
451 
452 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__SHSAX(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
453 {
454 &#32;&#32;uint32_t&#32;result;
455 &#32;&#32;
456 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;shsax&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
457 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
458 }
459 
460 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__USAX(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
461 {
462 &#32;&#32;uint32_t&#32;result;
463 &#32;&#32;
464 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;usax&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
465 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
466 }
467 
468 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__UQSAX(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
469 {
470 &#32;&#32;uint32_t&#32;result;
471 &#32;&#32;
472 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;uqsax&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
473 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
474 }
475 
476 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__UHSAX(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
477 {
478 &#32;&#32;uint32_t&#32;result;
479 &#32;&#32;
480 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;uhsax&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
481 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
482 }
483 
484 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__USAD8(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
485 {
486 &#32;&#32;uint32_t&#32;result;
487 &#32;&#32;
488 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;usad8&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
489 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
490 }
491 
492 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__USADA8(uint32_t&#32;op1,&#32;uint32_t&#32;op2,&#32;uint32_t&#32;op3)
493 {
494 &#32;&#32;uint32_t&#32;result;
495 &#32;&#32;
496 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;usada8&#32;%0,&#32;%1,&#32;%2,&#32;%3&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op3)&#32;);
497 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
498 }
499 
500 <emphasis role="preprocessor">#define&#32;__SSAT16(ARG1,ARG2)&#32;\</emphasis>
501 <emphasis role="preprocessor">({&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
502 <emphasis role="preprocessor">&#32;&#32;uint32_t&#32;__RES,&#32;__ARG1&#32;=&#32;(ARG1);&#32;\</emphasis>
503 <emphasis role="preprocessor">&#32;&#32;__ASM&#32;(&quot;ssat16&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;&quot;=r&quot;&#32;(__RES)&#32;:&#32;&#32;&quot;I&quot;&#32;(ARG2),&#32;&quot;r&quot;&#32;(__ARG1)&#32;);&#32;\
504 &#32;&#32;__RES;&#32;\
505 &#32;})
506 &#32;&#32;
507 <emphasis role="preprocessor">#define&#32;__USAT16(ARG1,ARG2)&#32;\</emphasis>
508 <emphasis role="preprocessor">({&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
509 <emphasis role="preprocessor">&#32;&#32;uint32_t&#32;__RES,&#32;__ARG1&#32;=&#32;(ARG1);&#32;\</emphasis>
510 <emphasis role="preprocessor">&#32;&#32;__ASM&#32;(&quot;usat16&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;&quot;=r&quot;&#32;(__RES)&#32;:&#32;&#32;&quot;I&quot;&#32;(ARG2),&#32;&quot;r&quot;&#32;(__ARG1)&#32;);&#32;\
511 &#32;&#32;__RES;&#32;\
512 &#32;})
513 
514 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__UXTB16(uint32_t&#32;op1)
515 {
516 &#32;&#32;uint32_t&#32;result;
517 &#32;&#32;
518 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;uxtb16&#32;%0,&#32;%1&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1));
519 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
520 }
521 
522 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__UXTAB16(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
523 {
524 &#32;&#32;uint32_t&#32;result;
525 &#32;&#32;
526 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;uxtab16&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
527 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
528 }
529 
530 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__SXTB16(uint32_t&#32;op1)
531 {
532 &#32;&#32;uint32_t&#32;result;
533 &#32;&#32;
534 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;sxtb16&#32;%0,&#32;%1&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1));
535 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
536 }
537 
538 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__SXTAB16(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
539 {
540 &#32;&#32;uint32_t&#32;result;
541 &#32;&#32;
542 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;sxtab16&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
543 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
544 }
545 
546 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__SMUAD&#32;&#32;(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
547 {
548 &#32;&#32;uint32_t&#32;result;
549 &#32;&#32;
550 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;smuad&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
551 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
552 }
553 
554 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__SMUADX&#32;(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
555 {
556 &#32;&#32;uint32_t&#32;result;
557 &#32;&#32;
558 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;smuadx&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
559 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
560 }
561 
562 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__SMLAD&#32;(uint32_t&#32;op1,&#32;uint32_t&#32;op2,&#32;uint32_t&#32;op3)
563 {
564 &#32;&#32;uint32_t&#32;result;
565 &#32;&#32;
566 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;smlad&#32;%0,&#32;%1,&#32;%2,&#32;%3&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op3)&#32;);
567 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
568 }
569 
570 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__SMLADX&#32;(uint32_t&#32;op1,&#32;uint32_t&#32;op2,&#32;uint32_t&#32;op3)
571 {
572 &#32;&#32;uint32_t&#32;result;
573 &#32;&#32;
574 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;smladx&#32;%0,&#32;%1,&#32;%2,&#32;%3&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op3)&#32;);
575 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
576 }
577 
578 <emphasis role="preprocessor">#define&#32;__SMLALD(ARG1,ARG2,ARG3)&#32;\</emphasis>
579 <emphasis role="preprocessor">({&#32;\</emphasis>
580 <emphasis role="preprocessor">&#32;&#32;uint32_t&#32;__ARG1&#32;=&#32;(ARG1),&#32;__ARG2&#32;=&#32;(ARG2),&#32;__ARG3_H&#32;=&#32;(uint32_t)((uint64_t)(ARG3)&#32;&gt;&gt;&#32;32),&#32;__ARG3_L&#32;=&#32;(uint32_t)((uint64_t)(ARG3)&#32;&amp;&#32;0xFFFFFFFFUL);&#32;\</emphasis>
581 <emphasis role="preprocessor">&#32;&#32;__ASM&#32;volatile&#32;(&quot;smlald&#32;%0,&#32;%1,&#32;%2,&#32;%3&quot;</emphasis>&#32;:&#32;&quot;=r&quot;&#32;(__ARG3_L),&#32;&quot;=r&quot;&#32;(__ARG3_H)&#32;:&#32;&quot;r&quot;&#32;(__ARG1),&#32;&quot;r&quot;&#32;(__ARG2),&#32;&quot;0&quot;&#32;(__ARG3_L),&#32;&quot;1&quot;&#32;(__ARG3_H)&#32;);&#32;\
582 &#32;&#32;(uint64_t)(((uint64_t)__ARG3_H&#32;&lt;&lt;&#32;32)&#32;|&#32;__ARG3_L);&#32;\
583 &#32;})
584 
585 <emphasis role="preprocessor">#define&#32;__SMLALDX(ARG1,ARG2,ARG3)&#32;\</emphasis>
586 <emphasis role="preprocessor">({&#32;\</emphasis>
587 <emphasis role="preprocessor">&#32;&#32;uint32_t&#32;__ARG1&#32;=&#32;(ARG1),&#32;__ARG2&#32;=&#32;(ARG2),&#32;__ARG3_H&#32;=&#32;(uint32_t)((uint64_t)(ARG3)&#32;&gt;&gt;&#32;32),&#32;__ARG3_L&#32;=&#32;(uint32_t)((uint64_t)(ARG3)&#32;&amp;&#32;0xFFFFFFFFUL);&#32;\</emphasis>
588 <emphasis role="preprocessor">&#32;&#32;__ASM&#32;volatile&#32;(&quot;smlaldx&#32;%0,&#32;%1,&#32;%2,&#32;%3&quot;</emphasis>&#32;:&#32;&quot;=r&quot;&#32;(__ARG3_L),&#32;&quot;=r&quot;&#32;(__ARG3_H)&#32;:&#32;&quot;r&quot;&#32;(__ARG1),&#32;&quot;r&quot;&#32;(__ARG2),&#32;&quot;0&quot;&#32;(__ARG3_L),&#32;&quot;1&quot;&#32;(__ARG3_H)&#32;);&#32;\
589 &#32;&#32;(uint64_t)(((uint64_t)__ARG3_H&#32;&lt;&lt;&#32;32)&#32;|&#32;__ARG3_L);&#32;\
590 &#32;})
591 
592 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__SMUSD&#32;&#32;(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
593 {
594 &#32;&#32;uint32_t&#32;result;
595 &#32;&#32;
596 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;smusd&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
597 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
598 }
599 
600 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__SMUSDX&#32;(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
601 {
602 &#32;&#32;uint32_t&#32;result;
603 &#32;&#32;
604 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;smusdx&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
605 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
606 }
607 
608 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__SMLSD&#32;(uint32_t&#32;op1,&#32;uint32_t&#32;op2,&#32;uint32_t&#32;op3)
609 {
610 &#32;&#32;uint32_t&#32;result;
611 &#32;&#32;
612 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;smlsd&#32;%0,&#32;%1,&#32;%2,&#32;%3&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op3)&#32;);
613 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
614 }
615 
616 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__SMLSDX&#32;(uint32_t&#32;op1,&#32;uint32_t&#32;op2,&#32;uint32_t&#32;op3)
617 {
618 &#32;&#32;uint32_t&#32;result;
619 &#32;&#32;
620 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;smlsdx&#32;%0,&#32;%1,&#32;%2,&#32;%3&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op3)&#32;);
621 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
622 }
623 
624 <emphasis role="preprocessor">#define&#32;__SMLSLD(ARG1,ARG2,ARG3)&#32;\</emphasis>
625 <emphasis role="preprocessor">({&#32;\</emphasis>
626 <emphasis role="preprocessor">&#32;&#32;uint32_t&#32;__ARG1&#32;=&#32;(ARG1),&#32;__ARG2&#32;=&#32;(ARG2),&#32;__ARG3_H&#32;=&#32;(uint32_t)((ARG3)&#32;&gt;&gt;&#32;32),&#32;__ARG3_L&#32;=&#32;(uint32_t)((ARG3)&#32;&amp;&#32;0xFFFFFFFFUL);&#32;\</emphasis>
627 <emphasis role="preprocessor">&#32;&#32;__ASM&#32;volatile&#32;(&quot;smlsld&#32;%0,&#32;%1,&#32;%2,&#32;%3&quot;</emphasis>&#32;:&#32;&quot;=r&quot;&#32;(__ARG3_L),&#32;&quot;=r&quot;&#32;(__ARG3_H)&#32;:&#32;&quot;r&quot;&#32;(__ARG1),&#32;&quot;r&quot;&#32;(__ARG2),&#32;&quot;0&quot;&#32;(__ARG3_L),&#32;&quot;1&quot;&#32;(__ARG3_H)&#32;);&#32;\
628 &#32;&#32;(uint64_t)(((uint64_t)__ARG3_H&#32;&lt;&lt;&#32;32)&#32;|&#32;__ARG3_L);&#32;\
629 &#32;})
630 
631 <emphasis role="preprocessor">#define&#32;__SMLSLDX(ARG1,ARG2,ARG3)&#32;\</emphasis>
632 <emphasis role="preprocessor">({&#32;\</emphasis>
633 <emphasis role="preprocessor">&#32;&#32;uint32_t&#32;__ARG1&#32;=&#32;(ARG1),&#32;__ARG2&#32;=&#32;(ARG2),&#32;__ARG3_H&#32;=&#32;(uint32_t)((ARG3)&#32;&gt;&gt;&#32;32),&#32;__ARG3_L&#32;=&#32;(uint32_t)((ARG3)&#32;&amp;&#32;0xFFFFFFFFUL);&#32;\</emphasis>
634 <emphasis role="preprocessor">&#32;&#32;__ASM&#32;volatile&#32;(&quot;smlsldx&#32;%0,&#32;%1,&#32;%2,&#32;%3&quot;</emphasis>&#32;:&#32;&quot;=r&quot;&#32;(__ARG3_L),&#32;&quot;=r&quot;&#32;(__ARG3_H)&#32;:&#32;&quot;r&quot;&#32;(__ARG1),&#32;&quot;r&quot;&#32;(__ARG2),&#32;&quot;0&quot;&#32;(__ARG3_L),&#32;&quot;1&quot;&#32;(__ARG3_H)&#32;);&#32;\
635 &#32;&#32;(uint64_t)(((uint64_t)__ARG3_H&#32;&lt;&lt;&#32;32)&#32;|&#32;__ARG3_L);&#32;\
636 &#32;})
637 
638 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__SEL&#32;&#32;(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
639 {
640 &#32;&#32;uint32_t&#32;result;
641 &#32;&#32;
642 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;sel&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
643 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
644 }
645 
646 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__QADD(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
647 {
648 &#32;&#32;uint32_t&#32;result;
649 
650 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;qadd&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
651 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
652 }
653 
654 __attribute__(&#32;(&#32;always_inline&#32;)&#32;)&#32;<emphasis role="keyword">static</emphasis>&#32;__INLINE&#32;uint32_t&#32;__QSUB(uint32_t&#32;op1,&#32;uint32_t&#32;op2)
655 {
656 &#32;&#32;uint32_t&#32;result;
657 &#32;&#32;
658 &#32;&#32;__ASM&#32;<emphasis role="keyword">volatile</emphasis>&#32;(<emphasis role="stringliteral">&quot;qsub&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;=r&quot;</emphasis>&#32;(result)&#32;:&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op1),&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>&#32;(op2)&#32;);
659 &#32;&#32;<emphasis role="keywordflow">return</emphasis>(result);
660 }
661 
662 <emphasis role="preprocessor">#define&#32;__PKHBT(ARG1,ARG2,ARG3)&#32;\</emphasis>
663 <emphasis role="preprocessor">({&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
664 <emphasis role="preprocessor">&#32;&#32;uint32_t&#32;__RES,&#32;__ARG1&#32;=&#32;(ARG1),&#32;__ARG2&#32;=&#32;(ARG2);&#32;\</emphasis>
665 <emphasis role="preprocessor">&#32;&#32;__ASM&#32;(&quot;pkhbt&#32;%0,&#32;%1,&#32;%2,&#32;lsl&#32;%3&quot;</emphasis>&#32;:&#32;&quot;=r&quot;&#32;(__RES)&#32;:&#32;&#32;&quot;r&quot;&#32;(__ARG1),&#32;&quot;r&quot;&#32;(__ARG2),&#32;&quot;I&quot;&#32;(ARG3)&#32;&#32;);&#32;\
666 &#32;&#32;__RES;&#32;\
667 &#32;})
668 
669 <emphasis role="preprocessor">#define&#32;__PKHTB(ARG1,ARG2,ARG3)&#32;\</emphasis>
670 <emphasis role="preprocessor">({&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
671 <emphasis role="preprocessor">&#32;&#32;uint32_t&#32;__RES,&#32;__ARG1&#32;=&#32;(ARG1),&#32;__ARG2&#32;=&#32;(ARG2);&#32;\</emphasis>
672 <emphasis role="preprocessor">&#32;&#32;if&#32;(ARG3&#32;==&#32;0)&#32;\</emphasis>
673 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__ASM&#32;(&quot;pkhtb&#32;%0,&#32;%1,&#32;%2&quot;</emphasis>&#32;:&#32;&quot;=r&quot;&#32;(__RES)&#32;:&#32;&#32;&quot;r&quot;&#32;(__ARG1),&#32;&quot;r&quot;&#32;(__ARG2)&#32;&#32;);&#32;\
674 &#32;&#32;else&#32;&#32;\
675 &#32;&#32;&#32;&#32;__ASM&#32;(&quot;pkhtb&#32;%0,&#32;%1,&#32;%2,&#32;asr&#32;%3&quot;&#32;:&#32;&quot;=r&quot;&#32;(__RES)&#32;:&#32;&#32;&quot;r&quot;&#32;(__ARG1),&#32;&quot;r&quot;&#32;(__ARG2),&#32;&quot;I&quot;&#32;(ARG3)&#32;&#32;);&#32;\
676 &#32;&#32;__RES;&#32;\
677 &#32;})
678 
679 <emphasis role="comment">/*--&#32;End&#32;CM4&#32;SIMD&#32;Intrinsics&#32;-----------------------------------------------------*/</emphasis>
680 
681 
682 
683 <emphasis role="preprocessor">#elif&#32;defined&#32;(&#32;__TASKING__&#32;)&#32;</emphasis><emphasis role="comment">/*------------------&#32;TASKING&#32;Compiler&#32;--------------*/</emphasis><emphasis role="preprocessor"></emphasis>
684 <emphasis role="comment">/*&#32;TASKING&#32;carm&#32;specific&#32;functions&#32;*/</emphasis>
685 
686 
687 <emphasis role="comment">/*------&#32;CM4&#32;SIMD&#32;Intrinsics&#32;-----------------------------------------------------*/</emphasis>
688 <emphasis role="comment">/*&#32;not&#32;yet&#32;supported&#32;*/</emphasis>
689 <emphasis role="comment">/*--&#32;End&#32;CM4&#32;SIMD&#32;Intrinsics&#32;-----------------------------------------------------*/</emphasis>
690 
691 
692 <emphasis role="preprocessor">#endif</emphasis>
693 
697 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;__CORE_CM4_SIMD_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
698 
699 <emphasis role="preprocessor">#ifdef&#32;__cplusplus</emphasis>
700 }
701 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
