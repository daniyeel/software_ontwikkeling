<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_stm32f4xx__rcc_8c" xml:lang="en-US">
<title>CUBE_IDE/VGA/Core/Src/stm32f4xx_rcc.c File Reference</title>
<indexterm><primary>CUBE_IDE/VGA/Core/Src/stm32f4xx_rcc.c</primary></indexterm>
<para>

<para>This file provides firmware functions to manage the following functionalities of the Reset and clock control (RCC) peripheral: </para>
 
</para>
<programlisting linenumbering="unnumbered">#include &quot;stm32f4xx_rcc.h&quot;<?linebreak?>#include &quot;stm32f4xx_conf.h&quot;<?linebreak?></programlisting><simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <emphasis role="strong">RCC_OFFSET</emphasis>&#160;&#160;&#160;(RCC_BASE - <link linkend="_group___peripheral__memory__map_1ga9171f49478fa86d932f89e78e73b88b0">PERIPH_BASE</link>)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">CR_OFFSET</emphasis>&#160;&#160;&#160;(RCC_OFFSET + 0x00)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">HSION_BitNumber</emphasis>&#160;&#160;&#160;0x00</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">CR_HSION_BB</emphasis>&#160;&#160;&#160;(<link linkend="_group___peripheral__memory__map_1gaed7efc100877000845c236ccdc9e144a">PERIPH_BB_BASE</link> + (CR_OFFSET * 32) + (HSION_BitNumber * 4))</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">CSSON_BitNumber</emphasis>&#160;&#160;&#160;0x13</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">CR_CSSON_BB</emphasis>&#160;&#160;&#160;(<link linkend="_group___peripheral__memory__map_1gaed7efc100877000845c236ccdc9e144a">PERIPH_BB_BASE</link> + (CR_OFFSET * 32) + (CSSON_BitNumber * 4))</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">PLLON_BitNumber</emphasis>&#160;&#160;&#160;0x18</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">CR_PLLON_BB</emphasis>&#160;&#160;&#160;(<link linkend="_group___peripheral__memory__map_1gaed7efc100877000845c236ccdc9e144a">PERIPH_BB_BASE</link> + (CR_OFFSET * 32) + (PLLON_BitNumber * 4))</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">PLLI2SON_BitNumber</emphasis>&#160;&#160;&#160;0x1A</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">CR_PLLI2SON_BB</emphasis>&#160;&#160;&#160;(<link linkend="_group___peripheral__memory__map_1gaed7efc100877000845c236ccdc9e144a">PERIPH_BB_BASE</link> + (CR_OFFSET * 32) + (PLLI2SON_BitNumber * 4))</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">CFGR_OFFSET</emphasis>&#160;&#160;&#160;(RCC_OFFSET + 0x08)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">I2SSRC_BitNumber</emphasis>&#160;&#160;&#160;0x17</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">CFGR_I2SSRC_BB</emphasis>&#160;&#160;&#160;(<link linkend="_group___peripheral__memory__map_1gaed7efc100877000845c236ccdc9e144a">PERIPH_BB_BASE</link> + (CFGR_OFFSET * 32) + (I2SSRC_BitNumber * 4))</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">BDCR_OFFSET</emphasis>&#160;&#160;&#160;(RCC_OFFSET + 0x70)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">RTCEN_BitNumber</emphasis>&#160;&#160;&#160;0x0F</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">BDCR_RTCEN_BB</emphasis>&#160;&#160;&#160;(<link linkend="_group___peripheral__memory__map_1gaed7efc100877000845c236ccdc9e144a">PERIPH_BB_BASE</link> + (BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">BDRST_BitNumber</emphasis>&#160;&#160;&#160;0x10</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">BDCR_BDRST_BB</emphasis>&#160;&#160;&#160;(<link linkend="_group___peripheral__memory__map_1gaed7efc100877000845c236ccdc9e144a">PERIPH_BB_BASE</link> + (BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">CSR_OFFSET</emphasis>&#160;&#160;&#160;(RCC_OFFSET + 0x74)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">LSION_BitNumber</emphasis>&#160;&#160;&#160;0x00</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">CSR_LSION_BB</emphasis>&#160;&#160;&#160;(<link linkend="_group___peripheral__memory__map_1gaed7efc100877000845c236ccdc9e144a">PERIPH_BB_BASE</link> + (CSR_OFFSET * 32) + (LSION_BitNumber * 4))</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">CFGR_MCO2_RESET_MASK</emphasis>&#160;&#160;&#160;((uint32_t)0x07FFFFFF)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">CFGR_MCO1_RESET_MASK</emphasis>&#160;&#160;&#160;((uint32_t)0xF89FFFFF)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">FLAG_MASK</emphasis>&#160;&#160;&#160;((uint8_t)0x1F)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">CR_BYTE3_ADDRESS</emphasis>&#160;&#160;&#160;((uint32_t)0x40023802)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">CIR_BYTE2_ADDRESS</emphasis>&#160;&#160;&#160;((uint32_t)(RCC_BASE + 0x0C + 0x01))</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">CIR_BYTE3_ADDRESS</emphasis>&#160;&#160;&#160;((uint32_t)(RCC_BASE + 0x0C + 0x02))</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">BDCR_ADDRESS</emphasis>&#160;&#160;&#160;(<link linkend="_group___peripheral__memory__map_1ga9171f49478fa86d932f89e78e73b88b0">PERIPH_BASE</link> + BDCR_OFFSET)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_group___r_c_c___group1_1ga413f6422be11b1334abe60b3bff2e062">RCC_DeInit</link> (void)</para>

<para>Resets the RCC clock configuration to the default reset state. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c___group1_1ga523b06e73f6aa8a03e42299c855066a8">RCC_HSEConfig</link> (uint8_t RCC_HSE)</para>

<para>Configures the External High Speed oscillator (HSE). </para>
</listitem>
            <listitem><para>ErrorStatus <link linkend="_group___r_c_c___group1_1gae0f15692614dd048ee4110a056f001dc">RCC_WaitForHSEStartUp</link> (void)</para>

<para>Waits for HSE start-up. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c___group1_1gaa2d6a35f5c2e0f86317c3beb222677fc">RCC_AdjustHSICalibrationValue</link> (uint8_t HSICalibrationValue)</para>

<para>Adjusts the Internal High Speed oscillator (HSI) calibration value. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c___group1_1ga0c6772a1e43765909495f57815ef69e2">RCC_HSICmd</link> (FunctionalState NewState)</para>

<para>Enables or disables the Internal High Speed oscillator (HSI). </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c___group1_1ga65209ab5c3589b249c7d70f978735ca6">RCC_LSEConfig</link> (uint8_t RCC_LSE)</para>

<para>Configures the External Low Speed oscillator (LSE). </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c___group1_1ga81e3ca29fd154ac2019bba6936d6d5ed">RCC_LSICmd</link> (FunctionalState NewState)</para>

<para>Enables or disables the Internal Low Speed oscillator (LSI). </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c___group1_1ga154b93e90bfdede2a874244a1ff1002e">RCC_PLLConfig</link> (uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)</para>

<para>Configures the main PLL clock source, multiplication and division factors. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c___group1_1ga84dee53c75e58fdb53571716593c2272">RCC_PLLCmd</link> (FunctionalState NewState)</para>

<para>Enables or disables the main PLL. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c___group1_1ga4c15157382939a693c15620a4867e6ad">RCC_PLLI2SConfig</link> (uint32_t PLLI2SN, uint32_t PLLI2SR)</para>

<para>Configures the PLLI2S clock multiplication and division factors. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c___group1_1ga2efe493a6337d5e0034bfcdfb0f541e4">RCC_PLLI2SCmd</link> (FunctionalState NewState)</para>

<para>Enables or disables the PLLI2S. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c___group1_1ga0ff1fd7b9a8a49cdda11b7d7261c3494">RCC_ClockSecuritySystemCmd</link> (FunctionalState NewState)</para>

<para>Enables or disables the Clock Security System. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c___group1_1ga15c9ecb6ef015ed008cb28e5b7a50531">RCC_MCO1Config</link> (uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)</para>

<para>Selects the clock source to output on MCO1 pin(PA8). </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c___group1_1gaf50f10675b747de60c739e44e5c22aee">RCC_MCO2Config</link> (uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)</para>

<para>Selects the clock source to output on MCO2 pin(PC9). </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c___group2_1ga3551a36a8f0a3dc96a74d6b939048337">RCC_SYSCLKConfig</link> (uint32_t RCC_SYSCLKSource)</para>

<para>Configures the system clock (SYSCLK). </para>
</listitem>
            <listitem><para>uint8_t <link linkend="_group___r_c_c___group2_1gaaeb32311c208b2a980841c9c884a41ea">RCC_GetSYSCLKSource</link> (void)</para>

<para>Returns the clock source used as system clock. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c___group2_1ga9d0aec72e236c6cdf3a3a82dfb525491">RCC_HCLKConfig</link> (uint32_t RCC_SYSCLK)</para>

<para>Configures the AHB clock (HCLK). </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c___group2_1ga448137346d4292985d4e7a61dd1a824f">RCC_PCLK1Config</link> (uint32_t RCC_HCLK)</para>

<para>Configures the Low Speed APB clock (PCLK1). </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c___group2_1ga09f9c010a4adca9e036da42c2ca6126a">RCC_PCLK2Config</link> (uint32_t RCC_HCLK)</para>

<para>Configures the High Speed APB clock (PCLK2). </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c___group2_1ga3e9944fd1ed734275222bbb3e3f29993">RCC_GetClocksFreq</link> (<link linkend="_struct_r_c_c___clocks_type_def">RCC_ClocksTypeDef</link> *RCC_Clocks)</para>

<para>Returns the frequencies of different on chip clocks; SYSCLK, HCLK, PCLK1 and PCLK2. <?linebreak?> </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c___group3_1ga1473d8a5a020642966359611c44181b0">RCC_RTCCLKConfig</link> (uint32_t RCC_RTCCLKSource)</para>

<para>Configures the RTC clock (RTCCLK). </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c___group3_1ga9802f84846df2cea8e369234ed13b159">RCC_RTCCLKCmd</link> (FunctionalState NewState)</para>

<para>Enables or disables the RTC clock. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c___group3_1ga636c3b72f35391e67f12a551b15fa54a">RCC_BackupResetCmd</link> (FunctionalState NewState)</para>

<para>Forces or releases the Backup domain reset. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c___group3_1ga6c56f8529988fcc8f4dbffbc1bab27d0">RCC_I2SCLKConfig</link> (uint32_t RCC_I2SCLKSource)</para>

<para>Configures the I2S clock source (I2SCLK). </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c___group3_1ga80c89116820d48bb38db2e7d5e5a49b9">RCC_AHB1PeriphClockCmd</link> (uint32_t RCC_AHB1Periph, FunctionalState NewState)</para>

<para>Enables or disables the AHB1 peripheral clock. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c___group3_1gaadffedbd87e796f01d9776b8ee01ff5e">RCC_AHB2PeriphClockCmd</link> (uint32_t RCC_AHB2Periph, FunctionalState NewState)</para>

<para>Enables or disables the AHB2 peripheral clock. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c___group3_1ga4eb8c119f2e9bf2bd2e042d27f151338">RCC_AHB3PeriphClockCmd</link> (uint32_t RCC_AHB3Periph, FunctionalState NewState)</para>

<para>Enables or disables the AHB3 peripheral clock. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c___group3_1gaee7cc5d73af7fe1986fceff8afd3973e">RCC_APB1PeriphClockCmd</link> (uint32_t RCC_APB1Periph, FunctionalState NewState)</para>

<para>Enables or disables the Low Speed APB (APB1) peripheral clock. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c___group3_1ga56ff55caf8d835351916b40dd030bc87">RCC_APB2PeriphClockCmd</link> (uint32_t RCC_APB2Periph, FunctionalState NewState)</para>

<para>Enables or disables the High Speed APB (APB2) peripheral clock. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c___group3_1gaa7c450567f4731d4f0615f63586cad86">RCC_AHB1PeriphResetCmd</link> (uint32_t RCC_AHB1Periph, FunctionalState NewState)</para>

<para>Forces or releases AHB1 peripheral reset. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c___group3_1gafb119d6d1955d1b8c361e8140845ac5a">RCC_AHB2PeriphResetCmd</link> (uint32_t RCC_AHB2Periph, FunctionalState NewState)</para>

<para>Forces or releases AHB2 peripheral reset. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c___group3_1gaee44f159a1ca9ebdd7117bff387cd592">RCC_AHB3PeriphResetCmd</link> (uint32_t RCC_AHB3Periph, FunctionalState NewState)</para>

<para>Forces or releases AHB3 peripheral reset. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c___group3_1gab197ae4369c10b92640a733b40ed2801">RCC_APB1PeriphResetCmd</link> (uint32_t RCC_APB1Periph, FunctionalState NewState)</para>

<para>Forces or releases Low Speed APB (APB1) peripheral reset. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c___group3_1gad94553850ac07106a27ee85fec37efdf">RCC_APB2PeriphResetCmd</link> (uint32_t RCC_APB2Periph, FunctionalState NewState)</para>

<para>Forces or releases High Speed APB (APB2) peripheral reset. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c___group3_1ga5cd0d5adbc7496d7005b208bd19ce255">RCC_AHB1PeriphClockLPModeCmd</link> (uint32_t RCC_AHB1Periph, FunctionalState NewState)</para>

<para>Enables or disables the AHB1 peripheral clock during Low Power (Sleep) mode. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c___group3_1ga1ac5bb9676ae9b48e50d6a95de922ce3">RCC_AHB2PeriphClockLPModeCmd</link> (uint32_t RCC_AHB2Periph, FunctionalState NewState)</para>

<para>Enables or disables the AHB2 peripheral clock during Low Power (Sleep) mode. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c___group3_1ga4e1df07cdfd81c068902d9d35fcc3911">RCC_AHB3PeriphClockLPModeCmd</link> (uint32_t RCC_AHB3Periph, FunctionalState NewState)</para>

<para>Enables or disables the AHB3 peripheral clock during Low Power (Sleep) mode. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c___group3_1ga84dd64badb84768cbcf19e241cadff50">RCC_APB1PeriphClockLPModeCmd</link> (uint32_t RCC_APB1Periph, FunctionalState NewState)</para>

<para>Enables or disables the APB1 peripheral clock during Low Power (Sleep) mode. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c___group3_1ga30365b9e0b4c5d7e98c2675c862ddd7e">RCC_APB2PeriphClockLPModeCmd</link> (uint32_t RCC_APB2Periph, FunctionalState NewState)</para>

<para>Enables or disables the APB2 peripheral clock during Low Power (Sleep) mode. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c___group4_1gaa953aa226e9ce45300d535941e4dfe2f">RCC_ITConfig</link> (uint8_t RCC_IT, FunctionalState NewState)</para>

<para>Enables or disables the specified RCC interrupts. </para>
</listitem>
            <listitem><para>FlagStatus <link linkend="_group___r_c_c___group4_1ga2897bdc52f272031c44fb1f72205d295">RCC_GetFlagStatus</link> (uint8_t RCC_FLAG)</para>

<para>Checks whether the specified RCC flag is set or not. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c___group4_1ga53f909dbb15a54124419084ebda97d72">RCC_ClearFlag</link> (void)</para>

<para>Clears the RCC reset flags. The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST, RCC_FLAG_SFTRST, RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST. </para>
</listitem>
            <listitem><para>ITStatus <link linkend="_group___r_c_c___group4_1ga6126c99f398ee4be410ad76ae3aee18f">RCC_GetITStatus</link> (uint8_t RCC_IT)</para>

<para>Checks whether the specified RCC interrupt has occurred or not. </para>
</listitem>
            <listitem><para>void <link linkend="_group___r_c_c___group4_1ga529842d165910f8f87e26115da36089b">RCC_ClearITPendingBit</link> (uint8_t RCC_IT)</para>

<para>Clears the RCC&apos;s interrupt pending bits. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>This file provides firmware functions to manage the following functionalities of the Reset and clock control (RCC) peripheral: </para>

<para><formalpara><title>Author</title>

<para>MCD Application Team </para>
</formalpara>
<formalpara><title>Version</title>

<para>V1.0.0 </para>
</formalpara>
<formalpara><title>Date</title>

<para>30-September-2011<itemizedlist>
<listitem>
<para>Internal/external clocks, PLL, CSS and MCO configuration</para>
</listitem><listitem>
<para>System, AHB and APB busses clocks configuration</para>
</listitem><listitem>
<para>Peripheral clocks configuration</para>
</listitem><listitem>
<para>Interrupts and flags management</para>
</listitem></itemizedlist>
</para>
</formalpara>
<literallayout><computeroutput>*               
*          ===================================================================
*                               RCC specific features
*          ===================================================================
*    
*          After reset the device is running from Internal High Speed oscillator 
*          (HSI 16MHz) with Flash 0 wait state, Flash prefetch buffer, D-Cache 
*          and I-Cache are disabled, and all peripherals are off except internal
*          SRAM, Flash and JTAG.
*           - There is no prescaler on High speed (AHB) and Low speed (APB) busses;
*             all peripherals mapped on these busses are running at HSI speed.
*             - The clock for all peripherals is switched off, except the SRAM and FLASH.
*           - All GPIOs are in input floating state, except the JTAG pins which
*             are assigned to be used for debug purpose.
*        
*          Once the device started from reset, the user application has to:        
*           - Configure the clock source to be used to drive the System clock
*             (if the application needs higher frequency/performance)
*           - Configure the System clock frequency and Flash settings  
*           - Configure the AHB and APB busses prescalers
*           - Enable the clock for the peripheral(s) to be used
*           - Configure the clock source(s) for peripherals which clocks are not
*             derived from the System clock (I2S, RTC, ADC, USB OTG FS/SDIO/RNG)      
*                        
*  </computeroutput></literallayout></para>

<para><caution><title>Attention</title>

<para></para>
</caution>
THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.</para>

<para><formalpara><title><informaltable frame='none'><tgroup cols='1'><colspec align='center'/><tbody><row><entry align='center'>&#169; COPYRIGHT 2011 STMicroelectronics</entry></row></tbody></tgroup></informaltable></title></formalpara>
</para>
</section>
</section>
